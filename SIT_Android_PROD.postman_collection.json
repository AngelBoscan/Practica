{
	"info": {
		"_postman_id": "f6ca44f2-de0b-41af-a2fd-b03303e51889",
		"name": "SIT Android PROD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login Android",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"authToken\", jsonData.id_token);\r",
									"\r",
									"pm.test(\"[AC-12044/AC-12043/AC-6349] - Validar que el servicio devuelva un token'\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"    pm.expect(jsonData.id_token).not.eq(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-12045] - Validar que el type devuelto en la response sea 'Bearer'\", function () {\r",
									"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validar que sea usuario FAN\", function () {\r",
									"    var jwt = parseJwt(pm.globals.get(\"authToken\"));\r",
									"    pm.expect(jwt.hasOwnProperty(\"duid\")).to.eql(true);\r",
									"});\r",
									"\r",
									"function parseJwt(jwtToken) {\r",
									"    var base64Url = jwtToken.split('.')[1];\r",
									"    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r",
									"    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\r",
									"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r",
									"    }).join(''));\r",
									"\r",
									"    return JSON.parse(jsonPayload);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{android}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{line_number}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{pin}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{idp}}/openam/oauth2/realms/root/realms/tabpinsextm/access_token",
							"host": [
								"{{idp}}"
							],
							"path": [
								"openam",
								"oauth2",
								"realms",
								"root",
								"realms",
								"tabpinsextm",
								"access_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Line Status",
			"item": [
				{
					"name": "Line status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Stores the DXP Product Inventory service adress.\r",
									"var productInventoryRequest = pm.environment.get(\"dxp\") + \"/ProductInventoryManagement/v2/product?mobileNumber=\" + pm.variables.get(\"line_number\");\r",
									"//Calls the function to get the product inventory response and set the variables needed.\r",
									"getProductInventory(productInventoryRequest);\r",
									"//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"function getProductInventory(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the JWT.\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            var lineDetails = responseJson.productos.find(function (e) {\r",
									"                //Filters the response of the DXP service with the line that was requested.\r",
									"                return e.mobileNumber == pm.variables.get(\"line_number\");\r",
									"            });\r",
									"            //Creates a variable that stores the line details.\r",
									"            pm.environment.set(\"lineDetails\", lineDetails);\r",
									"        } else {\r",
									"            //If the endpoint returns an error sets the variable to undefined so the test fails.\r",
									"            pm.environment.set(\"lineDetails\", undefined);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"pm.environment.set(\"lineStatusResponse\", jsonData);\r",
									"//Stores the details of the line obtained in the pre request scripts.\r",
									"var lineDetails = pm.environment.get(\"lineDetails\");\r",
									"//////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"//This test must be skipped in TEST environment because it would fail.\r",
									"pm.test(\"[AC-12983/AC-12987/AC-12988/AC-12989/AC-12990/AC-12993] - Validación de mapeos de los distintos estados\", function() {\r",
									"    validateLineStatus();\r",
									"});\r",
									"pm.test(\"[AC-14391/AC-14392/AC-14393/AC-14394/AC-14395/AC-14396/AC-14397/AC-14398/AC-14399/]- Validar el campo status_reason_code según el status reason\", function() {\r",
									"    validateStatusReasonCodes();\r",
									"});\r",
									"//This tests must be skipped in TEST environment because they would fail.\r",
									"pm.test(\"[AC-14400/AC-14401/AC-14402/AC-14403/AC-14484/AC-14485/AC-14486] - Validación de priorización de Status Reason\", function() {\r",
									"    pm.expect(validateStatusReasonPriority(lineDetails.statusReason)).to.eql(jsonData.status_reason);\r",
									"});\r",
									"////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"function validateStatusReasonPriority(statusReason){\r",
									"    //Variable used to store the statusReason.\r",
									"    var status;\r",
									"    //Priorization logic according to the values obtained in certain indexes.\r",
									"    if(statusReason[5] == \"2\"){\r",
									"        status = \"Suspensión Total por Fraude\";\r",
									"    }else if(statusReason[1] == \"2\") {\r",
									"        status = \"Suspensión Total por Siniestro\";\r",
									"    }else if(statusReason[2] != \"0\"){\r",
									"        status = statusReason[2] == \"1\" ? \"Suspensión Parcial por Mora\" : \"Suspensión Total por Mora\";\r",
									"    }else if(statusReason[3] == \"1\"){\r",
									"        status = \"Suspensión Parcial por Limite de consumo\";\r",
									"    }else if(statusReason[6] == \"1\"){\r",
									"        status = \"Suspensión Parcial por Saldo Negativo\";\r",
									"    }else if(statusReason[7] == \"2\"){\r",
									"        status = \"Suspensión Total por Pedido de Baja\";\r",
									"    }else if(statusReason[0] == \"2\"){\r",
									"        status = \"Suspensión Total Voluntaria\";\r",
									"    }else if(statusReason == \"000000000000000000000000\" ){\r",
									"        status = \"Activo\";\r",
									"    }else if(statusReason[8] == \"2\"){\r",
									"        status = \"Suspensión por Portabilidad\"\r",
									"    }else if(statusReason[4] != \"0\"){\r",
									"        //https://gestioncio.telecom.com.ar/browse/AC-18641\r",
									"        status = statusReason[4] == \"2\" ? \"Suspensión Parcial por Falta de Recarga\" : \"Suspensión Total por Mora\";\r",
									"    }else if(statusReason == \"000000000000000000010000\"){\r",
									"        status = \"Razón desconocida\"\r",
									"    } else{\r",
									"        pm.expect.fail(\"Priorización sin contemplar\")\r",
									"    }\r",
									"    return status;\r",
									"}\r",
									"function validateLineStatus(){\r",
									"    //If the line status is \"Suspendida por portabilidad\" Product Inventory returns that the user is Active (status 2) but for AG the user is Suspended (status 4), so we skip this validation for this case and added the validation for this in the else statement.\r",
									"    if(lineDetails.status != jsonData.status_code){\r",
									"        switch(lineDetails.statusReason){\r",
									"            case \"000000002000000000000000\":\r",
									"                pm.expect(jsonData.status_code).to.eql(4);\r",
									"            break;\r",
									"            case \"000020000000000000000000\":\r",
									"                //https://gestioncio.telecom.com.ar/browse/AC-18641\r",
									"                pm.expect(jsonData.status_code).to.eql(2);\r",
									"            break;\r",
									"            default:\r",
									"                pm.expect.fail(\"Inconsistencia en status de la linea\")\r",
									"        }\r",
									"    }\r",
									"    switch(jsonData.status_code){\r",
									"        case 1:\r",
									"            pm.expect(jsonData.status).to.eql(\"Sin utilizar\");\r",
									"            break;\r",
									"        case 2:\r",
									"            pm.expect(jsonData.status).to.eql(\"Activo\");\r",
									"            break;\r",
									"        case 3:\r",
									"            pm.expect(jsonData.status).to.eql(\"Restricción de Llamadas\");\r",
									"            break;\r",
									"        case 4:\r",
									"            pm.expect(jsonData.status).to.eql(\"Suspendido\");\r",
									"            break;\r",
									"        case 8:\r",
									"            pm.expect(jsonData.status).to.eql(\"Pre-desactivado\");\r",
									"            break;\r",
									"        case 9:\r",
									"            pm.expect(jsonData.status).to.eql(\"Desactivación\");\r",
									"            break;\r",
									"        default:\r",
									"            pm.expect.fail(\"Caso no contemplado\");\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"function validateStatusReasonCodes(){\r",
									"    switch(jsonData.status_reason) {\r",
									"        case \"Activo\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(0);\r",
									"        break;\r",
									"        case \"Suspensión Total Voluntaria\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(200000000);\r",
									"        break;\r",
									"        case \"Suspensión Total por Siniestro\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(20000000);\r",
									"        break;\r",
									"        case \"Suspensión Parcial por Mora\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(1000000);\r",
									"        break;\r",
									"        case \"Suspensión Total por Mora\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(2000000);\r",
									"        break;\r",
									"        case \"Suspensión Parcial por Límite de Consumo\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(100000);\r",
									"        break;\r",
									"        case \"Suspensión Parcial por Falta de Recarga\":\r",
									"            //https://gestioncio.telecom.com.ar/browse/AC-18641\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(10000);\r",
									"        break;\r",
									"        case \"Suspensión Total por Fraude\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(2000);\r",
									"        break;\r",
									"        case \"Suspensión Parcial por Saldo Negativo\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(100);\r",
									"        break;\r",
									"        case \"Suspensión Total por Pedido de Baja\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(20);\r",
									"        break;\r",
									"        case \"Suspensión por Portabilidad\":\r",
									"            pm.expect(jsonData.status_reason_code).to.eql(2);\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"pm.variables.unset(\"lineDetails\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-line/v1/line/{{line_number}}/status",
							"host": [
								"{{host}}-line"
							],
							"path": [
								"v1",
								"line",
								"{{line_number}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var environmentVariables = [\"lineStatusResponse\", \"postloginResponse\", \"availablesResponse\", \"roamingResponse\", \"roamingResponseCode\", \"type\", \"types\", \"filter\", \"filters\", \"consumptionsResponse\", \"responseSOS\", \"balancesResponse\", \"responseInvoiceHistory\", \"invoiceID\", \"responseCodeInvoiceHistory\", \"invoicesID\", \"type\", \"types\", \"id\", \"ids\", \"internetResetResponse\", \"plan_code\", \"upsellingListado\", \"plansToUpselling\", \"consumptionStartDate\", \"consumptionEndDate\",   \"plansUpselling\", \"idsID\", \"dataSample\", \"dataSet\", \"lineDetails\"];",
							"",
							"environmentVariables.forEach(function (e) {",
							"    pm.environment.unset(e);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authentication / Postlogin",
			"item": [
				{
					"name": "Postlogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the line status value for the current line. Obtained in the pre-request scripts..",
									"var lineStatusResponse = pm.environment.get(\"lineStatusResponse\");",
									"",
									"//Information obtained from the pre-requests",
									"var customerInfo = pm.variables.get(\"customerInfo\");",
									"var configParam = pm.variables.get(\"configParam\");",
									"",
									"//Stores the response in JSON format.",
									"var jsonData = pm.response.json().data;",
									"",
									"//Stores the response in an environment variable.",
									"pm.environment.set(\"postloginResponse\", jsonData);",
									"pm.environment.set(\"market\", jsonData.logged_line.market);",
									"pm.environment.set(\"plan_code\", jsonData.logged_line.plan.plan_code);",
									"",
									"//Stores the services home",
									"    var servicesHome = jsonData.services.filter( function (e) {",
									"        return e.type == \"home\";",
									"    }); ",
									"",
									"    let servicesWithPBU = jsonData.services.filter(function (e){",
									"        if(e.type===\"mobile\"){",
									"            return e.plan.is_basic_plan == true;",
									"        }",
									"        ",
									"    });",
									"",
									"    let notPrepaidServices = jsonData.services.filter(function (e){",
									"        if(e.type===\"mobile\"){",
									"            return e.market !== \"prepago\";",
									"        }",
									"        ",
									"    });",
									"",
									"//Stores the services mobile",
									"var servicesMobile = jsonData.services.filter( function (e) {",
									"    return e.type == \"mobile\";",
									"});",
									"",
									"",
									"//////////////////////////////////////////////////////////////////////////////////////////////",
									"",
									"pm.test(\"[AC-12762] - [Validar que el line number devuelto por el servicio corresponda al enviado en el parémetro]\", function () {",
									"    pm.expect(parseInt(jsonData.customer.line_number)).to.eql(parseInt(pm.variables.get(\"line_number\")), \"The line number obtained in the response doesn't match with the one used as a parameter\");",
									"});",
									"",
									"pm.test(\"[AC-13141] - [Validar el email devuelto por el servicio customerManagement]\", function () {",
									"    if (customerInfo[0].mail !== \"\") {",
									"        pm.expect(customerInfo[0].mail).to.eql(jsonData.customer.email, \"ERROR IN EMAIL\");",
									"    } else {",
									"        pm.expect(jsonData.customer.email).to.eql(\"Sin información\", \"ERROR IN EMAIL\");",
									"    }",
									"});",
									"",
									"pm.test(\"[ALM-12627 / ALM-12971] Validar campo is_allow_list en Postlogin V2\", function(){",
									"    if(pm.response.code==200){",
									"        if(configParam&&configParam.is_allow_list){",
									"        pm.expect(configParam.is_allow_list).to.be.eql(jsonData.customer.is_allow_list);",
									"        }else{",
									"            pm.expect(jsonData.customer.is_allow_list).to.be.false;",
									"        }",
									"    }else{",
									"        pm.expect.fail(\"Fallo el servicio PL\");",
									"    }",
									"});",
									"",
									"pm.test(\"[ALM-10240] - Validar que la linea con la que se realize la consulta, no se muestre en el array del campo services\", function(){",
									"    jsonData.services.forEach(function (e){",
									"        pm.expect(jsonData.logged_line.service_id).to.not.eql(e.service_id);",
									"    });",
									"});",
									"",
									"pm.test(\"[ALM-13558/ALM-13559/ALM-13888/ALM-13889] - Validar propiedades de acuerdo al 'service_type'\", function(){",
									"    validateServiceTypeProperties();",
									"    ",
									"});",
									"",
									"pm.test(\"[ALM-10241] - Validar que el avatar en poslogin coincida con la API de avatars\", function(){",
									"    //pm.expect(jsonData.logged_line.avatar_id).to.eql(pm.variables.get(\"avatarID\"));",
									"});",
									"",
									"pm.test(\"[ALM-13890] - Validar que el objeto 'status' de line status no se muestra en mobile\", function(){",
									"    pm.expect(jsonData).to.not.have.property(\"status\")",
									"})",
									"",
									"pm.test(\"[ALM-10239] - Validar que el service_id de logged line sea el line_number\", function(){",
									"    pm.expect(jsonData.customer.line_number).to.eql(jsonData.logged_line.service_id)",
									"});",
									"",
									"",
									"(servicesHome.length == 0 ? pm.test.skip : pm.test)(\"[ALM-18015/ALM-18343] - Validar visualizacion del campo status a nivel Servicio/Familia\", function(){",
									"    validateStatusServices();",
									"});",
									"",
									"(servicesHome.length == 0 ? pm.test.skip : pm.test)(\"[ALM-18344/ALM-18206] - Validar visualizacion del campo status a nivel Producto\", function(){",
									"    validateStatusProducts();",
									"});",
									"",
									"(jsonData.logged_line.market !== \"prepago\" || !jsonData.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19132] - Validar código de plan en linea logueada para usuario con PBU activo\", function(){",
									"    pm.expect(jsonData.logged_line.plan.plan_code).to.eql(\"FAN_PBUDN\");",
									"});",
									"",
									"(jsonData.services.length == 0 || servicesWithPBU.length == 0 ? pm.test.skip : pm.test)(\"[ALM-19134] - Validar código de plan de servicio asociado para usuario con PBU activo\", function(){",
									"    servicesWithPBU.forEach(function (f){",
									"        pm.expect(f.plan.plan_code).to.eql(\"FAN_PBUDN\");",
									"    })",
									"});",
									"",
									"(jsonData.logged_line.market == \"prepago\" ? pm.test.skip : pm.test)(\"[ALM-19129] - Validar flag PBU para linea logueada usuario abono/pospago\", function(){",
									"    pm.expect(jsonData.logged_line.plan.is_basic_plan).to.be.false;",
									"});",
									"",
									"(jsonData.services.length == 0 || notPrepaidServices.length == 0 ? pm.test.skip : pm.test)(\"[ALM-19130] - Validar flag PBU de servicio asociado para linea abono/pospago\", function(){",
									"    notPrepaidServices.forEach(function (f){",
									"        pm.expect(f.plan.is_basic_plan).to.be.false;",
									"    })",
									"});",
									"",
									"(jsonData.logged_line.market !== \"prepago\" || jsonData.logged_line.plan.plan_code !== \"FAN_PBUDN\" ? pm.test.skip : pm.test)(\"[ALM-19136] - Validar flag PBU para usuario Prepago con PBU activo\", function(){",
									"    pm.expect(jsonData.logged_line.plan.is_basic_plan).to.be.true;",
									"});",
									"",
									"",
									"",
									"//Functions",
									"",
									"function validateServiceTypeProperties(){",
									"    const HOME_PROPERTIES = [\"address\", \"products\"];",
									"    //El campo 'status' no corresponde para mobile y sí para web.",
									"    const MOBILE_PROPERTIES = [\"market\",\"submarket\",\"segment\",\"plan\"]",
									"",
									"    jsonData.services.forEach(function (e){",
									"        if(e.type == \"home\"){",
									"            pm.expect(e).to.include.all.keys(HOME_PROPERTIES);",
									"            pm.expect(e).to.not.have.any.keys(MOBILE_PROPERTIES)",
									"        }else{",
									"            pm.expect(e).to.include.all.keys(MOBILE_PROPERTIES)",
									"            pm.expect(e).to.not.have.any.keys(HOME_PROPERTIES)",
									"        }",
									"    });",
									"}",
									"",
									"function validateIdsProducts(){",
									"    jsonData.services.forEach(function(f){",
									"        if(f.products){",
									"            for(var i = 0; i < f.products.length; i++){",
									"                f.products[i].packs.forEach(function (e){",
									"                    pm.expect(e.id).not.to.be.empty;",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									"",
									"function validateStatusServices(){",
									"    servicesHome.forEach(function(f){",
									"        f.products.forEach(function(e){",
									"            pm.expect(e).to.have.property(\"status\");",
									"            pm.expect(e.status).to.be.eql(\"Sin Estado\");",
									"        });",
									"    });",
									"}",
									"",
									"function validateStatusProducts(){",
									"    servicesHome.forEach(function(f){",
									"            f.products.forEach(function(g){",
									"                g.packs.forEach(function (e){",
									"                    pm.expect(e).to.have.property(\"status\");                ",
									"                    pm.expect(e.status).to.be.eql(\"Sin Estado\");",
									"                });",
									"            });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Stores the DXP Product Inventory service adress.\r",
									"var customerManagementRequest = pm.environment.get(\"dxp\") + \"/CustomerManagement/v2/customer?mobileNumber=\" + pm.variables.get(\"line_number\");\r",
									"\r",
									"//Stores Config Params Response\r",
									"var configParamRequest = pm.environment.get(\"config_params\") + \"/v1/users/\"+ pm.variables.get(\"line_number\");\r",
									"\r",
									"var avatar = pm.variables.get(\"host\") + \"-avatar/v1/avatars/\" + pm.variables.get(\"line_number\");\r",
									"\r",
									"//Calls the function to get the product inventory response and set the variables needed.\r",
									"getAvatar(avatar);\r",
									"getCustomerManagement(customerManagementRequest);\r",
									"getConfigParam(configParamRequest);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"function getCustomerManagement(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the JWT.\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            //Creates a variable that stores the line details.\r",
									"            pm.variables.set(\"customerInfo\", responseJson);\r",
									"        } else {\r",
									"            //If the endpoint returns an error sets the variable to undefined so the test fails.\r",
									"            pm.variables.set(\"customerInfo\", undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function getConfigParam(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the JWT.\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            //Creates a variable that stores the line details.\r",
									"            pm.variables.set(\"configParam\", responseJson);\r",
									"        } else {\r",
									"            //If the endpoint returns an error sets the variable to undefined so the test fails.\r",
									"            pm.variables.set(\"configParam\", undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function getAvatar(){\r",
									"    pm.sendRequest({\r",
									"        url: avatar,\r",
									"        header: {\r",
									"            \"X-Source-Name\": \"WEB\",\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    }, function(err, response){\r",
									"        let responseJson = response.json();\r",
									"        pm.variables.set(\"avatarID\", responseJson.id);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-authentication/v4/authentication/postlogin/{{line_number}}",
							"host": [
								"{{host}}-authentication"
							],
							"path": [
								"v4",
								"authentication",
								"postlogin",
								"{{line_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internet Reset",
			"item": [
				{
					"name": "Internet Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"//Stores the user type of the current user.\r",
									"var market = pm.environment.get(\"market\");\r",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"//Stores the internet reset response.\r",
									"pm.environment.set(\"internetResetResponse\", jsonData);\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[AC-7968] - Validar que la respuesta del servicio no devuelva más de tres resultados\", function() {\r",
									"    pm.expect(jsonData.length).to.be.at.most(3);\r",
									"});\r",
									"\r",
									"//Validates that the items returned in the response are sorted by price ascending.\r",
									"(!postloginResponse.logged_line.is_basic_plan ? pm.test.skip : pm.test)(\"[AC-7969] - Validar el ordenamiento de los items devueltos por el servicio\", function() {\r",
									"    validateOrder();\r",
									"});\r",
									"\r",
									"//validates the best deal ID's\r",
									"pm.test(\"[AC-13098]/[AC-13119] - Validar los ID de los reseteo de cuotas Best Deal\",function(){\r",
									"    validateBestIdsInResponse ();\r",
									"});\r",
									"\r",
									"//Validates the amount of best deal offers.\r",
									"pm.test(\"[AC-15075/AC-15076/AC-15085] - Validar la cantidad de ofertas best_deal devueltas\", function() {\r",
									"    validateBestDeals();\r",
									"});\r",
									"\r",
									"//Validates that field 'formatted' doesn't contains decimal numbers.\r",
									"pm.test(\"[AC-16247] - Validar decimales en el precio de reseteo\", function(){\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect((jsonData[i].cost_with_unit.formatted.replace(\"$\", \"\")) % 1).to.equal(0)\r",
									"    }\r",
									"});\r",
									"\r",
									"//Validates that field 'value' is equal to the number in 'formatted' field.\r",
									"pm.test(\"[AC-16300] - Validar que coincidan el valor con el número enviado al front\", function(){\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"      pm.expect(jsonData[i].cost_with_unit.formatted.slice(1, 4)).to.equal(Math.trunc(jsonData[i].cost_with_unit.value).toString())\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-8915] / [ALM-8906] ] - Validar los campos del metodo de pago\",function(){\r",
									"    pay_methodCheck();\r",
									"});\r",
									"\r",
									"(market != \"prepago\" ? pm.test.skip : pm.test)(\"ALM-15084] - Validar orden de las ofertas de internet\", function () {\r",
									"   checkOrder(); \r",
									"});\r",
									"\r",
									"(market != \"prepago\" ? pm.test.skip : pm.test)(\"ALM-15186] - Validar BestDeal para las ofertas\", function () {\r",
									"   unit_bestDealCheck(); \r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19535] - Validar la respuesta de internet reset cuando usuario tiene PBU activo\", function(){\r",
									"    pm.expect(jsonData).to.be.empty;\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function validateBestDeals() {\r",
									"    //Filter the elements marked as best_deals\r",
									"    var bestDeals = jsonData.filter(function(e){\r",
									"        return e.is_best_deal === true;\r",
									"    });\r",
									"    \r",
									"    //Validates that only one offer is best deal in case we have more than 1 offers, also validates that theres no offer marked as best deal if we have 1 offer.\r",
									"    if(jsonData.length > 1){\r",
									"        pm.expect(bestDeals.length).to.equal(1);\r",
									"    }else{\r",
									"        pm.expect(bestDeals.length).to.equal(0);\r",
									"    }\r",
									"}\r",
									"\r",
									"//Validates that the items are sorted by price ascending.\r",
									"function validateOrder() {\r",
									"    for(i = 0; i + 1 != jsonData.length; i++){\r",
									"        pm.expect(jsonData[i].cost_with_unit.value).to.be.at.most(jsonData[i+1].cost_with_unit.value)\r",
									"    }\r",
									"}\r",
									"\r",
									"//check business id for best deal\r",
									"function validateBestIdsInResponse(){\r",
									"    let BusinessID = [\"10000717\",\"10000697\",\"10000588\"];\r",
									"    for(var i=0 ; i<jsonData.length; i++){\r",
									"        if(jsonData[i].is_best_deal){\r",
									"            let businessID_check = jsonData[i].id.substring(0,8);\r",
									"            pm.expect(businessID_check).to.be.oneOf(BusinessID);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//check the posibles values for pay_method\r",
									"function pay_methodCheck(){\r",
									"    let pay_methodID = [\"invoice\",\"credit\"];\r",
									"\r",
									"jsonData.forEach(item => {\r",
									"            if(market == \"prepago\"){\r",
									"        pm.expect(item.pay_method).to.be.equal(\"credit\");\r",
									"        }else if(market == \"abono\"){\r",
									"            pm.expect(item.pay_method).to.be.oneOf(pay_methodID);\r",
									"        }else{\r",
									"        pm.expect(item.pay_method).to.be.equal(\"invoice\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function checkOrder() {\r",
									"    var orderedItems = [];\r",
									"    var order = [\"100 MB\", \"500 MB\", \"2 GB\"];\r",
									"    var responseUnit = jsonData.map(function (e) {\r",
									"        return e.amount_with_unit;\r",
									"    });\r",
									"    for (i = 0; i < order.length; i++) {\r",
									"        if (responseUnit.indexOf(order[i]) > -1) {\r",
									"            orderedItems.push(order[i]);\r",
									"        }\r",
									"    }\r",
									"    pm.expect(orderedItems).to.eql(responseUnit);\r",
									"}\r",
									"\r",
									"function unit_bestDealCheck(){\r",
									"        jsonData.forEach(function(e){\r",
									"             if(e.amount_with_unit ===\"2 GB\" ){\r",
									"                pm.expect(e.is_best_deal).to.be.true\r",
									"             }\r",
									"      });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-reset/v2/payments/reset/{{line_number}}/internet",
							"host": [
								"{{host}}-reset"
							],
							"path": [
								"v2",
								"payments",
								"reset",
								"{{line_number}}",
								"internet"
							]
						},
						"description": "This endpoint returns the different offers that the user can acces for the internet reset functionality"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "SOS Recharge",
			"item": [
				{
					"name": "SOS Recharge",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Stores the request for Balances endpoint.\r",
									"\r",
									"var requestBalancesEndpoint = pm.variables.get(\"host\") + \"-balance/v4/balances/\" + pm.variables.get(\"line_number\");\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"getBalances(requestBalancesEndpoint);\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Calls Balances endpoint and sets variables that stores  information used on the scripts.\r",
									"function getBalances(request) {\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the source name and the JWT.\r",
									"        header: {\r",
									"            \"X-Source-Name\": \"ANDROID\",\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson = response.json();\r",
									"        //Creates a variable that stores the user type.\r",
									"        pm.variables.set(\"balancesResponse\", responseJson);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response object in JSON format and set the environment value depending on the response code.",
									"var jsonData = pm.response.json();",
									"",
									"var balancesResponse = pm.variables.get(\"balancesResponse\");",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"responseSOS\", jsonData.data);",
									"    pm.test(\"[AC-9600] - [Validar ordenamiento de los valores de recarga]\", function () {",
									"        validateSort();",
									"        });",
									"        ",
									"    pm.test(\"[AC-15728] - [Validar cantidad de recargas previas]\", function () {",
									"        pm.expect(parseInt(jsonData.data.previous_recharge)).to.eql(3);",
									"        });",
									"    ",
									"    pm.test(\"[ALM-12931] - Validar coincidencia del objeto Wallet con la API de Balances\", function () {",
									"            pm.expect(jsonData.data.wallet.credit).to.be.eql(balancesResponse.data.wallet.credit);",
									"        });",
									"",
									"    (jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20260] - [Validar cantidad de items de recarga cuando has_more es FALSE]\", function () {",
									"        pm.expect(jsonData.data.items.length).to.be.at.most(3);",
									"        });",
									"",
									"    (!jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20257] - [Validar cantidad de items de recarga cuando has_more es TRUE]\", function () {",
									"        pm.expect(jsonData.data.items.length).to.be.above(3);",
									"        });",
									"        ",
									"    /*(jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20259] - [Validar array vacío de highlights cuando has_more es FALSE]\", function () {",
									"        pm.expect(jsonData.data.highlights).to.be.empty;",
									"        });*/",
									"",
									"    (!jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20254] - [Validar cantidad de items de recarga cuando has_more es TRUE]\", function () {",
									"        pm.expect(jsonData.data.highlights.length).to.be.at.most(3);",
									"        });",
									"",
									"    (!jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20263] - [Validar estructura de highlights cuando tiene elementos]\", function () {",
									"        jsonData.data.highlights.forEach(function (e){",
									"            pm.expect(e).to.have.property(\"id\");",
									"            pm.expect(e).to.have.property(\"best_deal\")",
									"            })",
									"        });",
									"",
									"    (!jsonData.data.has_more ? pm.test.skip:pm.test)(\"[AC-20262] - [Validar que items contenga a los elementos de highlights]\", function () {",
									"        let ids = []",
									"        jsonData.data.highlights.forEach(function (e){",
									"            ids.push(e.id)",
									"        });",
									"        let itemsId = []",
									"        jsonData.data.items.forEach(function (f){",
									"            itemsId.push(f.id)",
									"        })",
									"        pm.expect(itemsId).include.deep.members(ids)",
									"        });",
									"",
									"} else {",
									"    (!jsonData.error ? pm.test.skip : pm.test)(\"[ALM-20225] - Validar código de respuesta\",function(){",
									"        pm.response.to.have.status(209)",
									"    });",
									"",
									"    pm.test(\"[ALM-20227/ALM-20228] - Validar código de error de Recarga SOS\", function(){",
									"        if(jsonData.error.params){",
									"            pm.expect(jsonData.error.code).to.eql(102)",
									"        }else{",
									"            pm.expect(jsonData.error.code).to.eql(103)",
									"        }",
									"        ",
									"    });",
									"",
									"    pm.test(\"[ALM-20229/ALM-20231] - Validar mensaje de error de Recarga SOS\", function(){",
									"        let ERROR_MESSAGE;",
									"        switch(jsonData.error.code){",
									"            case 102:",
									"            ERROR_MESSAGE = \"Lo sentimos, en este momento estamos teniendo inconvenientes. Por favor intentá más tarde.\"",
									"            break;",
									"            case 103:",
									"            ERROR_MESSAGE = \"¡Debés saldar tu Recarga SOS previa! Recordá que si no saldás tu deuda dentro de las 24 hs. de haber realizado la Recarga SOS, tendrás un costo adicional de $5.\"",
									"            break;",
									"            default:",
									"            pm.expect.fail(\"No existe código \"+ jsonData.error.code)",
									"        }",
									"        pm.expect(jsonData.error.message).to.eql(ERROR_MESSAGE)",
									"    });",
									"",
									"    (jsonData.error.code != 102 ? pm.test.skip : pm.test)(\"[ALM-20233] - Validar existencia del objeto 'params'\", function(){",
									"        pm.expect(jsonData.error).to.have.property(\"params\");",
									"    });",
									"",
									"    (!jsonData.error.params ? pm.test.skip : pm.test)(\"[ALM-20234/ALM-20237] - Validar objeto 'params' de la respuesta\", function(){",
									"        const SECOND_LINE = \"Por favor intentá más tarde.\"",
									"        const FIRST_LINE = \"Lo sentimos, en este momento estamos teniendo inconvenientes.\"",
									"        pm.expect(jsonData.error.params.second_line).to.eql(SECOND_LINE);",
									"        pm.expect(jsonData.error.params.first_line).to.eql(FIRST_LINE);",
									"    })",
									"",
									"    pm.environment.set(\"responseSOS\", jsonData);",
									"}",
									"",
									"////////////////////////////////////////////////////////////////////////////////////",
									"//Function that validates that the items are correctly sorted ascending by price.",
									"function validateSort() {",
									"    if(jsonData.data.items.length>1){",
									"        for (i = 0; i < jsonData.data.items.length-1; i++) {",
									"            pm.expect(jsonData.data.items[i].amount.value).to.be.at.most(jsonData.data.items[i+1].amount.value);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-recharge/v1/payments/recharge/{{line_number}}/sos",
							"host": [
								"{{host}}-recharge"
							],
							"path": [
								"v1",
								"payments",
								"recharge",
								"{{line_number}}",
								"sos"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Consumptions",
			"item": [
				{
					"name": "Consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response object in JSON format.",
									"var jsonData = pm.response.json().data;",
									"",
									"//Stores the user information obtained from the Postlogin endpoint, called in the pre request..",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"",
									"//Stores the response from Recharge SOS endpoint, called in the pre request.",
									"var responseSOS = pm.environment.get(\"responseSOS\");",
									"",
									"//Stores the line status Response",
									"var lineStatusResponse = pm.environment.get(\"lineStatusResponse\");",
									"",
									"//Stores the market of the user, obtained from Postlogin endpoint called in the pre request.",
									"var userMarket = pm.environment.get(\"market\");",
									"",
									"//Stores the user's plan information, obtained from Postlogin endpoint called in the pre request..",
									"var plan_cost = postloginResponse.logged_line.plan.basic_price;",
									"",
									"/////////////////////////////////////////////////////////////////////////////////////",
									"",
									"pm.environment.set(\"consumptionsResponse\", jsonData);",
									"",
									"////////////////////////////////////////////////////////////////////////////////////",
									"if(pm.response.code===200){",
									"    pm.test(\"[AC-9492]/[AC-11209] - Validar el ID de las distintas categorías de consumos\", function () {",
									"    if (jsonData.bill) {",
									"        validateCodes(jsonData.bill.details);",
									"    }",
									"    if (jsonData.top_up) {",
									"        validateCodes(jsonData.top_up.details);",
									"    }",
									"});",
									"",
									"(userMarket != \"prepago\" ? pm.test.skip : pm.test)(\"[AC-10873] - Validar el flag de SOS para usuarios prepago\", function () {",
									"    if (userMarket == \"prepago\") {",
									"        validateFlag(jsonData.top_up.has_debt);",
									"    }",
									"});",
									"",
									"(userMarket == \"prepago\" || responseSOS.error.code == 102 ? pm.test.skip : pm.test)(\"[AC-10871]/[AC-10922] - Validar el flag SOS para usuarios Abono Fijo / Pospago\", function(){",
									"    validateFlag(jsonData.bill.has_debt);",
									"});",
									"",
									"pm.test(\"[AC-10188]/[AC-10872]/[AC-10814] - Validar la sumatoria de los consumos del periodo por categoría y los campos nuevos en details\", function () {",
									"    if (jsonData.bill) {",
									"        if (userMarket == \"abono\" || userMarket == \"pospago\") {",
									"            pm.expect(sumDetailsData(jsonData.bill.details)).to.eql(jsonData.bill.total_consumption.value);",
									"        } else {",
									"            pm.expect.fail(\"Only abono and pospago users has the object 'bill' in the response\");",
									"        }",
									"    }",
									"    //el top up , desde el sprint 16 , solo existe para usuarios abono PREPAGO.",
									"    if (jsonData.top_up) {",
									"        if (userMarket == \"prepago\") {",
									"            pm.expect(sumDetailsData(jsonData.top_up.details)).to.eql(jsonData.top_up.total_consumption.value);",
									"        } else {",
									"            pm.expect.fail(\"Only prepago users have the object 'top up' in the response\");",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"[AC-11415] - Validar el ordenamiento de los items del snack\", function () {",
									"    if (userMarket === \"prepago\") {",
									"        checkOrderSnack(jsonData.top_up.details);",
									"    } else {",
									"        checkOrderSnack(jsonData.bill.details);",
									"    }",
									"});",
									"",
									"}",
									"",
									"",
									"////////////////////////////////////////////////////////////////////////////////////",
									"",
									"//Sums the cost of the items in the given array.",
									"function sumDetailsData(listValues) {",
									"    var sum = 0;",
									"    for (var i = 0; i < listValues.length; i++) {",
									"        sum = sum + listValues[i].cost.value;",
									"    }",
									"    return Math.round(sum * 100) / 100;",
									"}",
									"",
									"function validateCodes(listValues) {",
									"    for (var i = 0; i < listValues.length; i++) {",
									"        switch (true) {",
									"            case (listValues[i].description.includes(\"Credito\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(100);",
									"                break;",
									"            case (listValues[i].description.includes(\"Promocion\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(200);",
									"                break;",
									"            case (listValues[i].description.includes(\"SMS\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(300);",
									"                break;",
									"            case (listValues[i].description.includes(\"MMS\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(310);",
									"                break;",
									"            case (listValues[i].description.includes(\"Llamadas\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(400);",
									"                break;",
									"            case (listValues[i].description.includes(\"Llamada a Personal (OnNet)\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(401);",
									"                break;",
									"            case (listValues[i].description.includes(\"Llamada a Otras Operadora (OffNet)\t\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(402);",
									"                break;",
									"            case (listValues[i].description.includes(\"Llamadas LDI\t\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(410);",
									"                break;",
									"            case (listValues[i].description.includes(\"Credito de Recarga\t\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(500);",
									"                break;",
									"            case (listValues[i].description.includes(\"Internet\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(600);",
									"                break;",
									"            case (listValues[i].description.includes(\"Datos para la OTT Flow\t\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(700);",
									"                break;",
									"            case (listValues[i].description.includes(\"Datos para la OTT WhatsApp\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(710);",
									"                break;",
									"            case (listValues[i].description.includes(\"Datos para la OTT Facebook/Twitter\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(720);",
									"                break;",
									"            case (listValues[i].description.includes(\"Datos para Roaming\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(730);",
									"                break;",
									"            case (listValues[i].description.includes(\"Reset\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(800);",
									"                break;",
									"            case (listValues[i].description.includes(\"Packs y adicionales\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(850);",
									"                break;",
									"            case (listValues[i].description.includes(\"Costos\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(900);",
									"                break;",
									"            case (listValues[i].description.includes(\"Otros\")):",
									"                pm.expect(parseInt(listValues[i].id)).to.be.equal(999);",
									"                break;",
									"            default:",
									"                pm.expect.fail(\"Escenario sin contemplar\");",
									"                break;",
									"        }",
									"    }",
									"}",
									"",
									"//Validates the SOS flag of the endpoint, according to the response of the SOS RECHARGE endpoint.",
									"function validateFlag(flag) {",
									"    if (flag === true) {",
									"        pm.expect(responseSOS.error.code).to.equal(103);",
									"    } else {",
									"        pm.expect(responseSOS.items[0].id).not.to.equal(null);",
									"    }",
									"}",
									"",
									"//Validates the order of the different consumption categories.",
									"function checkOrderSnack(details) {",
									"    var orderedItems = [];",
									"    var order = [\"Internet\", \"Llamadas\", \"SMS\", \"Packs y adicionales\", \"Otros\"];",
									"    var responseDetails = details.map(function (e) {",
									"        return e.description;",
									"    });",
									"    for (i = 0; i < order.length; i++) {",
									"        if (responseDetails.indexOf(order[i]) > -1) {",
									"            orderedItems.push(order[i]);",
									"        }",
									"    }",
									"    pm.expect(orderedItems).to.eql(responseDetails);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-consumption/v2/consumptions/{{line_number}}",
							"host": [
								"{{host}}-consumption"
							],
							"path": [
								"v2",
								"consumptions",
								"{{line_number}}"
							]
						},
						"description": "This endpoint returns the snack and bite information for the dashboard."
					},
					"response": []
				},
				{
					"name": "Consumptions details filter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var filters = pm.environment.get(\"filters\");",
									"dxpDate();",
									"let prepayBalance = pm.environment.get(\"dxp\") + \"/PrepayBalanceManagement/v1/balanceActivity?productId=\"+ pm.variables.get(\"line_number\") +\"&startTime=\"+ pm.environment.get(\"consumptionStartDate\")+\"&endTime=\"+pm.environment.get(\"consumptionsEndDate\")+\"&fetchRowNum=100&limit=0&offset=0&usageType=cargoRecurrente\";",
									"consumptionFilter();",
									"getPrepayBalance(prepayBalance)",
									"",
									"function getPrepayBalance(request){",
									"    pm.sendRequest({",
									"        url: request,",
									"        //Configurates the header of the request with the JWT.",
									"        header: {",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")",
									"        },",
									"    },  function (err, response) {",
									"        var responseJson;",
									"        if(response.code == 200){",
									"            responseJson = response.json();",
									"            pm.variables.set(\"prepayResponse\", responseJson);",
									"        }",
									"    });",
									"}",
									"",
									"function consumptionFilter(){",
									"    if(!filters){",
									"    filters=[\"all\",\"cargoRecurrente\",\"sms\",\"voz\",\"internet\"];",
									"    }",
									"    var currentFilter = filters.shift();",
									"    pm.environment.set(\"filter\",currentFilter);",
									"    pm.environment.set(\"filters\",filters);",
									"}",
									"",
									"function dxpDate(){",
									"    var startDate = new Date();",
									"    startDate.setDate(startDate.getDate() - 6);",
									"    startDate.setHours(21, 0, 0, 0);",
									"    var endofDay = new Date();",
									"    endofDay.setHours(20, 59, 59, 999); ",
									"    pm.environment.set(\"consumptionStartDate\", startDate.toISOString());",
									"    pm.environment.set(\"consumptionsEndDate\", endofDay.toISOString());",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response object in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"var market = pm.environment.get(\"market\");\r",
									"var filters = pm.environment.get(\"filters\");\r",
									"var prepayBalance = pm.variables.get(\"prepayResponse\");\r",
									"//////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[AC-9515]/[AC-9514]/[AC-9513]/[AC-9512] - Validar filtrado por diferente tipo de producto\",function(){\r",
									"    if(filters && filters.length>0){\r",
									"    validateFilter();\r",
									"    postman.setNextRequest(\"Consumptions details filter\");\r",
									"    }else{\r",
									"        pm.environment.unset(\"filters\");\r",
									"        postman.setNextRequest();\r",
									"    }\r",
									"});\r",
									"pm.test(\"[AC-13353] - Validar número máximo de resultados mostrados\",function(){\r",
									"    pm.expect(parseInt(jsonData.pagination_data.fetch_row_num)).to.be.at.most(7);\r",
									"});\r",
									"pm.test(\"[AC-10917] - Validar el flag de Meal en la respuesta del servicio para usuarios Abono\",function(){\r",
									"    flag_for_items_who_add_value();\r",
									"});\r",
									"pm.test(\"[AC-13249/ALM-9316/ALM-9317] - Validar la traducción de los distintos tipos y su descripción\",function(){\r",
									"    validateTypeTranslations();\r",
									"});\r",
									"pm.test(\"[AC-13256] - Validar la conversión de las distintas unidades de medida\",function(){\r",
									"    transformationUnits();\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"//Validate different filters\r",
									"function validateFilter(){\r",
									"    for(let i =0 ; i< jsonData.content.length ; i++){\r",
									"        if(pm.environment.get(\"filter\") !== \"all\"){\r",
									"            pm.expect(pm.environment.get(\"filter\")).to.eql(jsonData.content[i].type);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"function validateTypeTranslations(){\r",
									"    //esta funcion valida las reglas de negocios , donde verifica la traducción entre el tipo y la descripción.\r",
									"    for (var i = 0 ; i < jsonData.content.length ; i++) {\r",
									"        switch(jsonData.content[i].type) {\r",
									"            case (\"voz\"):\r",
									"                pm.expect(jsonData.content[i].description).to.include(\"Llamada\");\r",
									"                break;\r",
									"            case (\"sms\"):\r",
									"                pm.expect(jsonData.content[i].description).to.include(\"SMS\");\r",
									"                break;\r",
									"            case (\"mms\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"MMS\");\r",
									"                break;\r",
									"            case (\"cargoPorContenido\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Trivia o Suscripción\");\r",
									"                break;\r",
									"            case (\"cargoRecurrente\"):\r",
									"                prepayFunction(jsonData.content.filter(function (e){\r",
									"                return e.type == \"cargoRecurrente\"}));\r",
									"                break;\r",
									"            case (\"clearMainBalance\"):\r",
									"                pm.expect(jsonData.conten[i].description).to.be.equal(\"Crédito de abono\");\r",
									"                break;\r",
									"            case (\"ajuste\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Ajuste\");\r",
									"                break;\r",
									"            case (\"primeraActivacion\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Crédito inicial\");\r",
									"                break;\r",
									"            case (\"internet\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Internet\");\r",
									"                break;\r",
									"            case (\"recargaSOS\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Recarga SOS\");\r",
									"                break;\r",
									"            case(\"pagoRecargaSOS\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Pago Recarga SOS\");\r",
									"                break;\r",
									"            case(\"recarga\"):\r",
									"                pm.expect(jsonData.content[i].description).to.be.equal(\"Recarga crédito\");\r",
									"                break;\r",
									"            default: \r",
									"                pm.expect.fail(\"bug o caso no contemplado\");\r",
									"                break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"function transformationUnits(){\r",
									"    /*\r",
									"    El time format es una expresión regular\r",
									"    / indica caracter de entrada\r",
									"    \\ indica caracter de salida\r",
									"    [0-9] los valores esperados son entre 0 y 9\r",
									"    {2} van a ser 2 valores\r",
									"    : valida que se encuentren los 2 puntos\r",
									"    */\r",
									"    const timeFormat = /^([0-9]{2})\\:([0-9]{2})\\:([0-9]{2})$/;\r",
									"    for (let i = 0 ; i < jsonData.content.length ; i++) {\r",
									"        if(jsonData.content[i].type === \"voz\"){\r",
									"        let hour = jsonData.content[i].used.formatted_time;\r",
									"        pm.expect(timeFormat.test(hour)).to.be.equal(true);\r",
									"        }\r",
									"        if(jsonData.content[i].type === \"internet\"){\r",
									"            pm.expect(jsonData.content[i].used.unit).to.be.equal(\"MB\");\r",
									"        }\r",
									"    }\r",
									"}\r",
									"function flag_for_items_who_add_value(){\r",
									"        if(market === 'abono') {\r",
									"        for(i=0;i<jsonData.content.length;i++){\r",
									"            if(jsonData.content[i].type === \"recarga\"){\r",
									"                pm.expect(jsonData.content[i].is_add_up).to.be.true;        \r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"function prepayFunction(cargoRecurrenteArray){\r",
									"    let cargoRecurrente = [];\r",
									"    let descriptions = [];\r",
									"    cargoRecurrente.forEach(function (e){\r",
									"        if(prepayBalance.balanceActivities.product){\r",
									"            prepayBalance.balanceActivities.forEach(function (item) {  \r",
									"                cargoRecurrente.push(e.name)\r",
									"                });\r",
									"            jsonData.content.forEach(function (item2){\r",
									"                descriptions.push(item2.description);\r",
									"                });\r",
									"            const found = cargoRecurrente.some(r=> descriptions.includes(r))\r",
									"            pm.expect(found).to.be.true;\r",
									"        }else{\r",
									"            jsonData.content.forEach(function (e){\r",
									"                pm.expect(e.description).to.eql(\"Packs y adicionales\")\r",
									"                });\r",
									"        }});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-consumption/v2/consumptions/{{line_number}}/details?usageType={{filter}}",
							"host": [
								"{{host}}-consumption"
							],
							"path": [
								"v2",
								"consumptions",
								"{{line_number}}",
								"details"
							],
							"query": [
								{
									"key": "usageType",
									"value": "{{filter}}"
								}
							]
						},
						"description": "This endpoint returns the consumption details of the user. This endpoint is used to provide the \"Meal\"with the information."
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Balances",
			"item": [
				{
					"name": "Balances Availables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"var market = pm.environment.get(\"market\");\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"pm.environment.set(\"availablesResponse\", jsonData);\r",
									"\r",
									"let mongoResponse = pm.variables.get(\"mongodb\");\r",
									"let prepay = pm.variables.get(\"prepay\");\r",
									"//Stores the actual date in GMT-3.\r",
									"var actualDate = Date.parse(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Buenos_Aires\"}));\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"//If the length of the array is 0 the test gets skipped because theres no need to execute the validations\r",
									"(jsonData.internet_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-12086] - Validar que ningún item correspondiente a 'Internet' se encuentre expirado\", function() {\r",
									"checkForExpiredItems(jsonData.internet_details);\r",
									"});\r",
									"\r",
									"//If the length of the array is 0 the test gets skipped because theres no need to execute the validations.\r",
									"(jsonData.minutes_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-12087] - Validar que ningún item correspondiente a 'Minutos' se encuentre expirado\", function(){\r",
									"    checkForExpiredItems(jsonData.minutes_details);\r",
									"});\r",
									"\r",
									"//If the length of the array is 0 the test gets skipped because theres no need to execute the validations.\r",
									"(jsonData.sms_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-12088] - Validar que ningún item correspondiente a 'SMS' se encuentre expirado\", function(){\r",
									"    checkForExpiredItems(jsonData.sms_details);\r",
									"});\r",
									"//If the length of the array is 0 the test gets skipped because theres no need to execute the validations.\"\r",
									"(jsonData.credit_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-12091] - Validar que ningún item correspondiente al 'Crédito' se encuentre expirado\", function() {\r",
									"    checkForExpiredItems(jsonData.credit_details);\r",
									"});\r",
									"\r",
									"//If the length of the array is 0 the test gets skipped because theres no need to execute the validations.\"\r",
									"(jsonData.promotion_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-12092] - Validar que ningún item correspondiente a 'Crédito promocional' se encuentre expirado\", function(){\r",
									"    checkForExpiredItems(jsonData.promotion_details);\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////// 23/07/2020\r",
									"//////////////////////////////////////////////////////////////////\r",
									"//\r",
									"//\r",
									"//TEST DEPRECADO, EN CASO DE VOLVERSE A USAR DESCOMENTAR TEST\r",
									"//\r",
									"//\r",
									"//////////////////////////////////////////////////////////////////\r",
									"//////////////////////////////////////////////////////////////////\r",
									"/*pm.test(\"[AC-11368/AC-11366/AC-11364/AC-11503] - Validación del formato de fecha de expiración para los items de internet_details\", function() {\r",
									"    validateExpirationDate(jsonData.internet_details);\r",
									"});*/\r",
									"//\r",
									"//\r",
									"//\r",
									"///////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"(jsonData.credit_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-6013] - Validación del orden de los items contenidos en credit_details\", function(){\r",
									"    validateOrder(jsonData.credit_details);\r",
									"});\r",
									"\r",
									"(jsonData.promotion_details.length === 0 ? pm.test.skip : pm.test)(\"[AC-6018] - Validación del orden de los items contenidos en promotion_details\", function(){\r",
									"    validateOrder(jsonData.promotion_details);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-6019] - Validación del orden de los items contenidos en sms_details\", function(){\r",
									"    validateOrder(jsonData.sms_details);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-6688] - Validación del orden de los items contenidos en minutes_details\", function(){\r",
									"    validateOrder(jsonData.minutes_details);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-6684] - Validación del orden de los items contenidos en internet_details\", function(){\r",
									"    validateOrder(jsonData.internet_details);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-6668] - Validacion del orden de los OTTs dentro de la sección internet_details\", function() {\r",
									"    var arrayOTT = [];\r",
									"    //Load the array with the OTTs\r",
									"    for (i=0; i<jsonData.internet_details.length; i++) {\r",
									"        if (jsonData.internet_details[i].id == \"710\" || jsonData.internet_details[i].id == \"720\") {\r",
									"            arrayOTT.push(jsonData.internet_details[i]);\r",
									"        }\r",
									"    }\r",
									"    validateOrder(arrayOTT);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-6677] - Validar codigos para cada detalle de la respuesta\", function () {\r",
									"    iterateJson();\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-17379] - Validar descripciones de acuerdo al tipo de crédito\", function () {\r",
									"    validateDescriptions();\r",
									"});\r",
									"\r",
									"(has_ott(\"700\") ? pm.test.skip : pm.test)(\"[ALM-18793] - Validar las unidades libres para FLOW\", function(){\r",
									"    let filteredOTT = mongoResponse.value.find(function (e){\r",
									"        return e.service_code == \"700\"\r",
									"    });\r",
									"    \r",
									"    validateFreeUnit(filteredOTT);\r",
									"});\r",
									"\r",
									"(has_ott(\"720\") ? pm.test.skip : pm.test)(\"[ALM-18794/ALM-18795/ALM-18796] - Validar las unidades libres para REDES\", function(){\r",
									"    let filteredOTT = mongoResponse.value.find(function (e){\r",
									"        return e.service_code == \"720\"\r",
									"    });\r",
									"    validateFreeUnit(filteredOTT);\r",
									"    \r",
									"});\r",
									"\r",
									"(has_ott(\"760\") ? pm.test.skip : pm.test)(\"[ALM-18792/ALM-18797/ALM-18798] - Validar las unidades libres para VIDEO\", function(){\r",
									"    let filteredOTT = mongoResponse.value.find(function (e){\r",
									"        return e.service_code == \"760\"\r",
									"    });\r",
									"    validateFreeUnit(filteredOTT);\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Iterate over the response.\r",
									"function iterateJson() {\r",
									"var tipo;    \r",
									"const keys = Object.keys(jsonData);\r",
									"for (i=0; i < keys.length; i++) {\r",
									"    switch (keys[i]) {\r",
									"        case \"credit_details\":\r",
									"            tipo = \"credito\";\r",
									"            validateCodes(jsonData.credit_details, tipo);\r",
									"            break;\r",
									"        case \"promotion_details\":\r",
									"            tipo = \"promocion\";\r",
									"            validateCodes(jsonData.promotion_details, tipo);\r",
									"            break;\r",
									"        case \"minutes_details\":\r",
									"            tipo = \"minutos\";\r",
									"            validateCodes(jsonData.minutes_details, tipo);\r",
									"            break;\r",
									"        case \"sms_details\":\r",
									"            tipo = \"SMS\";\r",
									"            validateCodes(jsonData.sms_details, tipo);\r",
									"            break;\r",
									"        case \"internet_details\":\r",
									"            tipo = \"internet\";\r",
									"            validateCodes(jsonData.internet_details, tipo);\r",
									"            break;\r",
									"        default:\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"//Validates the code of every product \r",
									"function validateCodes(array, tipo) {\r",
									"    let idAbono = [100,500];\r",
									"    let idMinutos = [401,402];\r",
									"    switch(tipo) {\r",
									"        case \"credito\":\r",
									"            switch (market) {\r",
									"                case \"prepago\":\r",
									"                    for (var i=0; i < array.length; i++) {\r",
									"                        pm.expect(parseFloat(array[i].id)).to.be.equal(500,\"El código no es correcto para el crédito de un usuario prepago\");\r",
									"                    }\r",
									"                break;\r",
									"                case \"abono\":\r",
									"                    for (i=0; i < array.length; i++) {\r",
									"                        pm.expect(parseFloat(array[i].id)).to.be.oneOf(idAbono,\"El código no es correcto para el crédito de un usuario abono\");\r",
									"                        \r",
									"                    }\r",
									"                break;\r",
									"                case \"pospago\":\r",
									"                    if (array.length !== 0) {\r",
									"                        pm.expect.fail(\"El usuario pospago no puede tener crédito\");\r",
									"                    }\r",
									"                break;\r",
									"                default:\r",
									"                break;\r",
									"            }   \r",
									"        break;\r",
									"        case \"promocion\":\r",
									"            for (i=0; i < array.length; i++) {\r",
									"                pm.expect(parseFloat(array[i].id)).to.be.equal(200,\"El código no es correcto para el crédito promocional\");\r",
									"                \r",
									"            }\r",
									"        break;\r",
									"        case \"SMS\":\r",
									"            for (i=0; i < array.length; i++) {\r",
									"                pm.expect(parseFloat(array[i].id)).to.be.equal(300,\"el código no es correcto para SMS\");\r",
									"            }\r",
									"        break;\r",
									"        case \"minutos\":\r",
									"            for (i=0; i < array.length; i++) {\r",
									"                pm.expect(parseFloat(array[i].id)).to.be.oneOf(idMinutos,\"el código no es correcto para Minutos\");\r",
									"            }\r",
									"        break;\r",
									"        case \"internet\":\r",
									"            for (i=0; i < array.length; i++) {\r",
									"                if (!(parseFloat(array[i].id) >= 600 && parseFloat(array[i].id) < 900)) {\r",
									"                    pm.expect.fail(\"El código no es correcto para internet\");\r",
									"                }\r",
									"            }\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"//Validate the expiration date and the order of the items.\r",
									"function validateOrder(detailsArray) {\r",
									"//Filters the array with the elemnts with availables.\r",
									"var sortedArray = detailsArray.filter( item => item.unused_amount !== 0);\r",
									"for(var i=0; i<sortedArray.length;i++){\r",
									"        for(var j = i+1 ; j<sortedArray.length; j++){\r",
									"            if(parseInt(sortedArray[i].id) < 700 && parseInt(sortedArray[j].id) < 700){\r",
									"            pm.expect((moment(sortedArray[i].expiration_date).isSameOrBefore(sortedArray[j].expiration_date))).to.be.true;\r",
									"        }else if(j+1 < sortedArray.length){\r",
									"            pm.expect((moment(sortedArray[j].expiration_date).isSameOrBefore(sortedArray[j+1].expiration_date))).to.be.true;\r",
									"        }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"//Iterates over the given array and validates the expiration date in the correct format.\r",
									"function validateExpirationDate(array){\r",
									"    array.forEach(element => pm.expect(element.expiration_date_in_time).to.eql(getExpirationDateInTime(element.expiration_date)), \"Error in date on time format.\");\r",
									"}\r",
									"\r",
									"//Function that receives a date and returns the days/hours until expiration.\r",
									"function getExpirationDateInTime(date){\r",
									"    //Stores the value of a day in ms.\r",
									"    var dayInMs = 86400000;\r",
									"    //Stores the value of an hour in ms.\r",
									"    var hourInMs = 3600000;\r",
									"    //Stores the time until expiration.\r",
									"    var timeUntilExpiration;\r",
									"    \r",
									"    //Validates if the time until expiration is more or equal to one day in MS.\r",
									"    if((Date.parse(date) - actualDate) >= dayInMs){\r",
									"        var daysUntilExpiration = Math.trunc((Date.parse(date) - actualDate) / dayInMs);\r",
									"        //Sets the value of the time until expiration according to the days left.\r",
									"        timeUntilExpiration = daysUntilExpiration + (daysUntilExpiration > 1 ? \" días\" : \" día\");\r",
									"        //If the time until expiration is less than a day\r",
									"    } else {\r",
									"        //Calculates the hours until expiration according to the difference in MS between the expiration date and the actual date.\r",
									"        var hoursUntilExpiration = Math.trunc((Date.parse(date) - actualDate) / hourInMs);\r",
									"        //Sets the value of the time until expiration according to the hours left.\r",
									"        timeUntilExpiration = hoursUntilExpiration + (hoursUntilExpiration > 1 ? \" horas\" : \" hora\");\r",
									"    }\r",
									"    return timeUntilExpiration;\r",
									"}\r",
									"\r",
									"//This function receives an array and validates that the items contained in the array aren't expired.\r",
									"function checkForExpiredItems(array) {\r",
									"    array.forEach(element => pm.expect(Date.parse(element.expiration_date)).to.be.at.least(actualDate, \"Expirated item returned\"));\r",
									"}\r",
									"\r",
									"//Validate description of different types of credit.\r",
									"function validateDescriptions(){\r",
									"    for(i=0;i<jsonData.credit_details.length;i++){\r",
									"        switch(jsonData.credit_details[i].id){\r",
									"            case \"100\":\r",
									"            pm.expect(jsonData.credit_details[i].description).to.eql(\"Crédito de abono\");\r",
									"            break;\r",
									"            case \"200\":\r",
									"            pm.expect(jsonData.credit_details[i].description).to.eql(\"Crédito promocional\");\r",
									"            break;\r",
									"            case \"500\":\r",
									"            pm.expect(jsonData.credit_details[i].description).to.eql(\"Crédito de recarga\");\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateFreeUnit(element){\r",
									"    let filtered = filteredFreeUnit(element);\r",
									"    filtered.forEach(function (e){\r",
									"        switch(e){\r",
									"        case \"C_FU_DATA_YOUTUBE\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos Libres para YouTube\");\r",
									"        break;\r",
									"        case \"C_FU_DATA_FLOW\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos Libres para Flow\");\r",
									"        break;\r",
									"        case \"C_FU_RS_Instagram_Snapchat\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos libres Instagram - Snapchat\");\r",
									"        break;\r",
									"        case \"C_FU_RS_Instagram_Snapchat_Facebook_Twiter_WA\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos Redes Sociales Full\");\r",
									"        break;\r",
									"        case \"C_FU_RS_Facebook_Twitter\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos libres Facebook - Twiter\");\r",
									"        break;\r",
									"        case \"C_FU_DATA_YOUTUBE_NETFLIX\":\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos Libres para YouTube y Netflix\");\r",
									"        break;\r",
									"        case \"C_FU_DATA_YOUTUBE_NETFLIX_FLOW\":\r",
									"        if(market == \"prepago\"){\r",
									"        pm.expect(filterOTT(element.service_code)).to.eql(\"Datos Libres para Flow, Netflix, Youtube\");\r",
									"        }\r",
									"        break;\r",
									"        default:\r",
									"        pm.expect.fail(\"No existe código para: \"+element.code_free_unit)\r",
									"        break;\r",
									"    }\r",
									"    })\r",
									"}\r",
									"\r",
									"function filterOTT(ott){\r",
									"    let filteredOTT = jsonData.internet_details.find( item => item.id == ott)\r",
									"    return filteredOTT.description;\r",
									"}\r",
									"\r",
									"function has_ott(ott){\r",
									"   return jsonData.internet_details.find(item => item.id == ott) == undefined;;\r",
									"}\r",
									"\r",
									"function filteredFreeUnit(mongo){\r",
									"    let arrayPrepay = []\r",
									"    prepay.forEach(function (e){\r",
									"        arrayPrepay = arrayPrepay.concat(e.name)\r",
									"    });\r",
									"    return mongo.code_free_unit.filter(element => arrayPrepay.includes(element));\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let freeUnitsOTTsMongo = pm.environment.get(\"config_params\") + \"/v2/params/balance_params_codes_fu_internet_ott\";\r",
									"\r",
									"let prepayBalanceBucket = pm.environment.get(\"dxp\") + \"/PrepayBalanceManagement/v2/bucket?productId=\" + pm.variables.get(\"line_number\");\r",
									"\r",
									"getFreeUnitsFromMongo(freeUnitsOTTsMongo);\r",
									"getPrepayBalance(prepayBalanceBucket);\r",
									"\r",
									"function getFreeUnitsFromMongo(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            pm.variables.set(\"mongodb\", responseJson);\r",
									"        } else {\r",
									"            pm.variables.set(\"mongodb\", undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function getPrepayBalance(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            pm.variables.set(\"prepay\", responseJson);\r",
									"        } else {\r",
									"            pm.variables.set(\"prepay\", undefined);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}-balance/v2/balances/{{line_number}}/available",
							"host": [
								"{{host}}-balance"
							],
							"path": [
								"v2",
								"balances",
								"{{line_number}}",
								"available"
							]
						},
						"description": "Obtiene los distintos elementos que posee el usuario para completar el segundo nivel de detalle del dashboard\n(SMS, INTERNET, MINUTOS, PASES)"
					},
					"response": []
				},
				{
					"name": "Balances",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response object in JSON format.\r",
									"let jsonData = pm.response.json().data;\r",
									"\r",
									"//Stores useful responses for some tests.\r",
									"let availablesResponse = pm.environment.get(\"availablesResponse\");\r",
									"let lineStatusResponse = pm.environment.get(\"lineStatusResponse\");\r",
									"let reset_options = pm.environment.get(\"internetResetResponse\");\r",
									"let market = pm.environment.get(\"market\");\r",
									"let responseSOS = pm.environment.get(\"responseSOS\");\r",
									"let consumptionsResponse = pm.environment.get(\"consumptionsResponse\");\r",
									"\r",
									"//Stores the actual date.\r",
									"let systemDate = new Date();\r",
									"\r",
									"//Comento estas lineas ya que esperamos que siempre se sumaricen las unidades locales de momento.\r",
									"//let roamingResponse = pm.environment.get(\"roamingResponse\");\r",
									"//let roamingResponseCode = pm.environment.get(\"roamingResponseCode\");\r",
									"//HARDCODEO ESTOS VALORES PARA QUE SIEMPRE SE SUMEN LAS UNIDADES LOCALES.\r",
									"let roamingResponse = {\r",
									"  status: \"Inactivo\"\r",
									"}\r",
									"let roamingResponseCode = 200;\r",
									"\r",
									"pm.environment.set(\"balancesResponse\", jsonData);\r",
									"//Skips the billing requests if the user is prepay.\r",
									"if(market == \"prepago\"){\r",
									"    postman.setNextRequest(\"Voices\");\r",
									"    var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"    var servicesHome = postloginResponse.services.filter( function (e) {\r",
									"    return e.type == \"home\";\r",
									"    });\r",
									"    if (servicesHome.length == 0){\r",
									"        postman.setNextRequest(\"Voices\");\r",
									"    }  \r",
									"    else {\r",
									"        postman.setNextRequest(\"Historial de factura\");\r",
									"        }  \r",
									"}\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//If the user status is \"Suspendido\" the test must be skipped.\r",
									"(lineStatusResponse.status == \"Suspendido\" || !jsonData.internet.reset ? pm.test.skip : pm.test)(\"[AC-9465] - Validation of reset options\", function() {\r",
									"  validateReset();\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-9456] - Validación de coincidencia de crédito en el servicio de Balances con el servicio de Balances-Availables\", function () {\r",
									"  if (availablesResponse.credit_details.length > 0) {\r",
									"    validateCredit(jsonData.wallet.credit.value, availablesResponse.credit_details);   \r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-9457] - Validación de coincidencia de crédito promocional en el servicio de Balances con el servicio de Balances-Availables\", function () {\r",
									"  if (availablesResponse.promotion_details.length > 0) {\r",
									"    validateCredit(jsonData.wallet.promotion.value, availablesResponse.promotion_details);   \r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-12305/AC-12302/AC-12297] - Validación de coincidencia de SMS en el servicio de Balances con el servicio de Balances-Availables\", function () {\r",
									"  validateProducts(filterByRoamingStatus(availablesResponse.sms_details), jsonData.sms)\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-10758/AC-10757/AC-10755] - Validación de coincidencia de Internet en el servicio de Balances con el servicio de Balances-Availables\", function () {\r",
									"    validateProducts(filterByRoamingStatus(availablesResponse.internet_details), jsonData.internet)\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-12306/AC-12303/AC-12298/AC-14368/AC-14365/AC-14374] - Validación de coincidencia de OTTs en el servicio de Balances con el servicio de Balances-Availables\", function() {\r",
									"  validateOTT(availablesResponse.internet_details, jsonData.ott);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-9461] - Validación de flag de Internet por día\", function() {\r",
									"  validateInternetPerDay();\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-9463] - [Validar fechas de expiración de SMS]\",function(){\r",
									"  validateExpirationDates(filterByRoamingStatus(availablesResponse.sms_details), jsonData.sms);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-12094] - [Validar fecha de expiración de Internet]\", function() {\r",
									"  validateExpirationDates(filterByRoamingStatus(availablesResponse.internet_details), jsonData.internet);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-12304/AC-12301/AC-12296] - Validación de totalizador de minutos y visualización\", function() {\r",
									"  validateMinutes(availablesResponse.minutes_details); \r",
									"});\r",
									"\r",
									"pm.test(\"[AC-15873 /AC-15878 / AC-15879] Validar que los disponibles en availables coincidan con el flag de balance\", function(){\r",
									"  validateFlagFromBalance(availablesResponse.internet_details,jsonData.internet);\r",
									"  validateFlagFromBalance(availablesResponse.minutes_details,jsonData.minute);\r",
									"  validateFlagFromBalance(availablesResponse.sms_details,jsonData.sms);\r",
									"})\r",
									"\r",
									"pm.test(\"[AC-16699/AC-16700] - Validar el valor del flag 'is_roaming' de acuerdo al estado de roaming actual del usuario\", function () {\r",
									"  validateRoaming();\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-11986] - Validar flag has_debt para usuario pospago\", function(){\r",
									"    pm.expect(jsonData.has_debt).to.be.false;\r",
									"});\r",
									"\r",
									"(!responseSOS ? pm.test.skip : pm.test)(\"[ALM-11988] - Validar coincidencia de flag con API de Recarga SOS\", function(){\r",
									"    if(responseSOS.error){\r",
									"        if (responseSOS.error.code==103){\r",
									"            pm.expect(jsonData.has_debt).to.be.true;     \r",
									"        }\r",
									"    }else{         \r",
									"        pm.expect(jsonData.has_debt).to.be.false;     \r",
									"    }\r",
									"});\r",
									"\r",
									"(!consumptionsResponse ? pm.test.skip : pm.test)(\"[ALM-12001] - Validar coincidencia de flag con API de Consumptions\", function(){\r",
									"    if(market == \"prepago\"){\r",
									"        pm.expect(jsonData.has_debt).to.eql(consumptionsResponse.top_up.has_debt);\r",
									"    }else{\r",
									"        pm.expect(jsonData.has_debt).to.eql(consumptionsResponse.bill.has_debt);\r",
									"    }\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Validation of the flags for internet per day.\r",
									"function validateInternetPerDay() {\r",
									"  var internetPerDay = false;\r",
									"  for (i=0; i<availablesResponse.internet_details.length; i++) {\r",
									"    if (availablesResponse.internet_details[i].is_internet_per_day_enabled) {\r",
									"      internetPerDay = true;\r",
									"    }\r",
									"  }\r",
									"  if (internetPerDay) {\r",
									"    pm.expect(jsonData.internet.is_per_day_enabled).to.be.true;\r",
									"  }\r",
									"}\r",
									"//Validation of totalizers for credit and promotional credit.\r",
									"function validateCredit(walletValue, array) {\r",
									"  var credit = array.map((detail) => detail.amount.value);\r",
									"  var totalCredit = credit.reduce((accumulator, currentValue) => {\r",
									"    return accumulator + currentValue;\r",
									"  });\r",
									"\r",
									"  if(credit.length === 0 && walletValue !== 0) {\r",
									"    pm.expect.fail(\"El usuario no cuenta con crédito\");\r",
									"  }\r",
									"  \r",
									"  pm.expect(parseFloat(totalCredit.toFixed(2))).to.eql(walletValue, \"Difference between the available credit and the total shown\");\r",
									"   \r",
									"}\r",
									"//Validation of totalizers for the different products.\r",
									"//arrayAvailables equals to the filtered array of the product returned in the availables endpoint.\r",
									"//jsonDataObject equals to the product object, returned in this API, that we want to validate.\r",
									"function validateProducts(arrayAvailables, jsonDataObject) {\r",
									"    var total= 0.0;\r",
									"    var unused = 0.0;\r",
									"    if (arrayAvailables.length > 0) {\r",
									"        for (var i = 0; i<arrayAvailables.length; i++) {\r",
									"            if(arrayAvailables[i].total_amount == -1 || arrayAvailables[i].unused_amount == -1 ) {\r",
									"                //If the user has one unlimited item, we exit the loop and validate because '-1' is the maximum value possible.\r",
									"                total = -1;\r",
									"                unused = -1;\r",
									"                break;\r",
									"            }\r",
									"            total += arrayAvailables[i].total_amount;\r",
									"            unused += arrayAvailables[i].unused_amount;\r",
									"        }\r",
									"        pm.expect(jsonDataObject.total_amount).to.eql(Math.round(total * 100) / 100, \"Inconsistencia en la suma de disponibles - TOTAL AMOUNT\");\r",
									"        pm.expect(jsonDataObject.unused_amount).to.eql(Math.round(unused * 100) / 100, \"Inconsistencia en la suma de disponibles - UNUSED AMOUNT\");\r",
									"    }else{\r",
									"        pm.expect(jsonDataObject.total_amount).to.eql(0, \"El usuario no posee disponibles\");\r",
									"        pm.expect(jsonDataObject.unused_amount).to.eql(0, \"El usuario no posee disponibles\");\r",
									"    }  \r",
									"}\r",
									"\r",
									"//Validates the consistency and visualization of OTTs.\r",
									"//Receives the internet avaiables and the displayed otts in the balance.\r",
									"function validateOTT(availables, balance){\r",
									"    //Removes the internet items from the array.\r",
									"    var ott = availables.filter(function (e){\r",
									"      return e.id !== \"600\" && e.id !== \"601\";\r",
									"    });\r",
									"\r",
									"    //Filters the array according to the roaming status.\r",
									"    if(roamingResponseCode != 200 || roamingResponse.status === \"Inactivo\"){\r",
									"        ott = ott.filter(function (e) {\r",
									"          return e.is_roaming === false;\r",
									"        }).map(function (e){\r",
									"        return e.id;\r",
									"        });\r",
									"    }else{\r",
									"        ott = ott.filter(function (e) {\r",
									"          return e.is_roaming === true;\r",
									"        }).map(function (e){\r",
									"        return e.id;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    //Creates a new array removing the repeated elements using the set constructor.\r",
									"    uniq = [...new Set(ott)];\r",
									"    uniq.sort();\r",
									"    \r",
									"\r",
									"    //Sorts the balance OTTs\r",
									"    balance.sort();\r",
									"    \r",
									"\r",
									"    //Validate the amount of otts.\r",
									"    pm.expect(balance.length).to.equal(uniq.length, \"Inconsistency in the amount of OTTs displayed\");\r",
									"    //Iterates over the array and validates the consistency.\r",
									"    balance.forEach(function (e){\r",
									"        pm.expect(e).to.be.oneOf(uniq, \"Inconsistency in the OTTs displayed.\");\r",
									"    });\r",
									"}\r",
									"\r",
									"//Validates the rules for the minutes totalizers according to the user's available\r",
									"function validateMinutes(array){\r",
									"    let arrayOffNet = filterMinutesByType(\"offNet\", array);\r",
									"    let arrayOnNet = filterMinutesByType(\"onNet\", array);\r",
									"\r",
									"    let minutesOnNet = setMinutes(arrayOnNet);\r",
									"    let minutesOffNet = setMinutes(arrayOffNet);\r",
									"\r",
									"    //If the user doesn't have minutes availables\r",
									"    if(minutesOffNet.total_amount == 0 && minutesOnNet.total_amount == 0){\r",
									"        //The totalizers need to show that the user doesn't have minutes availables.\r",
									"        pm.expect(jsonData.minute.total_amount).to.eql(0);\r",
									"        pm.expect(jsonData.minute.unused_amount).to.eql(0);\r",
									"        //The property expiration_date should't be returned.\r",
									"        pm.expect(jsonData.minute).to.not.have.property(\"expiration_date\")\r",
									"        //If the user doesn't have minutes availables, this boolean must be false.\r",
									"        pm.expect(jsonData.minute.is_on_personal).to.eql(false);\r",
									"    }\r",
									"\r",
									"    //If both minutes are unlimited\r",
									"    if(minutesOffNet.total_amount == -1 && minutesOnNet.total_amount == -1){\r",
									"        //The totalizers need to show that the user has unlimited minutes.\r",
									"        pm.expect(jsonData.minute.total_amount).to.eql(-1);\r",
									"        pm.expect(jsonData.minute.unused_amount).to.eql(-1);\r",
									"        //The minutes are for all companies and not only for \"Personal\".\r",
									"        pm.expect(jsonData.minute.is_on_personal).to.eql(false);\r",
									"    }\r",
									"\r",
									"    //If the user has unlimited On net minutes, but more than 0 minutes offnet left to use\r",
									"    if(minutesOffNet.unused_amount > 0 && minutesOnNet.total_amount == -1){\r",
									"        //The totalizers need to show the total and unused for off net minutes. \r",
									"        pm.expect(jsonData.minute.total_amount).to.eql(minutesOffNet.total_amount);\r",
									"        pm.expect(jsonData.minute.unused_amount).to.eql(minutesOffNet.unused_amount);\r",
									"        //The minutes are for all companies and not only for \"Personal\".\r",
									"        pm.expect(jsonData.minute.is_on_personal).to.eql(false);\r",
									"    }\r",
									"\r",
									"    //If the user doesn't have Offnet minutes availables and the user has unlimited on net minutes\r",
									"    if(minutesOffNet.unused_amount == 0 && minutesOnNet.unused_amount == -1){\r",
									"        //The totalizers need to show that the user has unlimited \"On net\" minutes.\r",
									"        pm.expect(jsonData.minute.total_amount).to.eql(-1);\r",
									"        pm.expect(jsonData.minute.unused_amount).to.eql(-1);\r",
									"        //The minutes are only for \"Personal\".\r",
									"        pm.expect(jsonData.minute.is_on_personal).to.eql(true);\r",
									"    }\r",
									"\r",
									"    //If the user has both types of minutes limited availables\r",
									"    if(minutesOffNet.unused_amount > 0 && minutesOnNet.unused_amount > 0){\r",
									"        //The totalizers need to show the sum of both type of minutes.\r",
									"        pm.expect(jsonData.minute.total_amount).to.eql(minutesOffNet.total_amount + minutesOnNet.total_amount);\r",
									"        pm.expect(jsonData.minute.unused_amount).to.eql(minutesOffNet.unused_amount + minutesOnNet.unused_amount);\r",
									"        //The minutes are for all companies and not only for \"Personal\".\r",
									"        pm.expect(jsonData.minute.is_on_personal).to.be.false;\r",
									"    }\r",
									"}\r",
									"\r",
									"//Returns a new minutes object\r",
									"function setMinutes(array){\r",
									"    if(checkForUnlimited(array)){\r",
									"        return new minutes(-1, -1)\r",
									"\r",
									"        //FIRST VALIDATES IF THE ARRAY LENGTH IS >0 BECAUSE YOU CAN'T DO A REDUCE WHEN THE ARRAY IS EMPTY\r",
									"    }else if(array.length > 0){\r",
									"            var totalMinutesArray = array.map((e) => e.total_amount);\r",
									"            var unusedMinutesArray = array.map((e) => e.unused_amount);\r",
									"            return new minutes(sumUnits(totalMinutesArray), sumUnits(unusedMinutesArray));\r",
									"        } else{\r",
									"            //IF THE ARRAY IS EMPTY ASSIGNS THE DEFAULT VALUE 0,0 WHICH REPRESENTS THAT THE USER DOESN'T HAVE AVAILABLES\r",
									"        return new minutes(0, 0);\r",
									"    }\r",
									"}\r",
									"\r",
									"//Sums the different values contained inside the given array.\r",
									"function sumUnits(array){\r",
									"    return total = array.reduce((accumulator, currentValue) => {\r",
									"        return accumulator + currentValue;\r",
									"    });\r",
									"}\r",
									"\r",
									"//Checks if the user has unlimited minutes (represented using '-1') and returns a boolean.\r",
									"function checkForUnlimited(array){\r",
									"    array = array.filter(function (e){\r",
									"        return e.total_amount == -1;\r",
									"    })\r",
									"    return array.length > 0 ? true : false;\r",
									"}\r",
									"\r",
									"//This methd filters the array of minutes by type. Off Net or On Net\r",
									"function filterMinutesByType(type, array){\r",
									"    //Ids for each type of minutes.\r",
									"    const onNetId = \"401\";\r",
									"    const offNetId = \"402\";\r",
									"\r",
									"    switch(type){\r",
									"        //Returns the onnet minutes.\r",
									"        case \"onNet\":\r",
									"        return array.filter(function (e){\r",
									"            //HARDCODEO EL VALOR DE ROAMING YA Q AÚN NO ESTÁ LA FUNCIONALIDAD\r",
									"            return e.id == onNetId && e.is_roaming == false;\r",
									"        });\r",
									"        //Returns the offnet minutes.\r",
									"        case \"offNet\":\r",
									"        return array.filter(function (e){\r",
									"            //HARDCODEO EL VALOR DE ROAMING YA Q AÚN NO ESTÁ LA FUNCIONALIDAD\r",
									"            return e.id == offNetId && e.is_roaming == false;;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"//Constructor of object minutes.\r",
									"function minutes(total, unused){\r",
									"    //Represents the total amount of minutes.\r",
									"    this.total_amount = total;\r",
									"    //Represents the unused amount of minutes.\r",
									"    this.unused_amount = unused;\r",
									"}\r",
									"\r",
									"function validateReset() {\r",
									"  //Filters the array of reset options (obtained from a different request in the pre-re scripts) with the ones marked as best_deal.\r",
									"  var best_deal = reset_options.filter(function(e){\r",
									"    return e.is_best_deal === true; \r",
									"  });\r",
									"  //If the length is >= 1 the first one should be displayed on the balances services\r",
									"  if(best_deal.length >= 1) {\r",
									"    pm.expect(jsonData.internet.reset.options[0].id).to.equal(best_deal[0].id, \"Different ID from reset options and balances.\");\r",
									"    pm.expect(jsonData.internet.reset.options[0].description).to.equal(best_deal[0].amount_with_unit, \"Different description from reset options and balances.\");\r",
									"  }else{\r",
									"    //If the length is 0 (there's no option marked as best deal) the first option should be displayed at the front.\r",
									"    pm.expect(jsonData.internet.reset.options[0].id).to.equal(reset_options[0].id, \"Different ID from reset options and balances.\");\r",
									"    pm.expect(jsonData.internet.reset.options[0].description).to.equal(reset_options[0].amount_with_unit, \"Different description from reset options and balances.\");\r",
									"  }\r",
									"}\r",
									"\r",
									"//Validates the expiration dates shown in the product details of the response, according to the given array.\r",
									"//We should pass a filtered array according to the roaming status.\r",
									"function validateExpirationDates(filteredArray, productDetails){\r",
									"  if(filteredArray.length === 0) {\r",
									"    //If the array's length returned after filtering by roaming status is 0, the SMS section shouldn't have the expiration date property.\r",
									"    pm.expect(productDetails).to.not.have.property('expiration_date');\r",
									"  }else{\r",
									"    var arraySorted = sortByExpirationDate(filteredArray);\r",
									"    pm.expect(arraySorted[0].expiration_date).to.eql(productDetails.expiration_date);\r",
									"  }\r",
									"}\r",
									"//Filters the given array according to the roaming status obtained in the pre request scripts.\r",
									"function filterByRoamingStatus(array){\r",
									"    const smsID = '300'\r",
									"    const internetWithoutRoamingID = '600'\r",
									"    const internetWithRoamingID = '601'\r",
									"   \r",
									"   //If the service fails or the status is 'Inactivo' we only need to return the local units.\r",
									"   //We filter the elements with the roaming flag in 'false'.\r",
									"  if(roamingResponseCode != 200 || roamingResponse.status === \"Inactivo\"){\r",
									"    //Filters the array removing the products that are for roaming, because they don't need to be sumarized.\r",
									"    return array.filter(function (e) {\r",
									"        return e.is_roaming === false && e.id === smsID || e.id === internetWithoutRoamingID;\r",
									"    });\r",
									"  } else {\r",
									"    //If the roaming status is 'Activo' we only need to return the roaming units.\r",
									"    //We filter the elements with the roaming flag in true.\r",
									"    return array.filter(function (e) {\r",
									"        //Filters the array removing the products that aren't for roaming, because they don't need to be sumarized.\r",
									"        return e.is_roaming === true && e.id === smsID || e.id === internetWithRoamingID;\r",
									"    });\r",
									"  }\r",
									"}\r",
									"//Sorts the given array by expiration date from next to expire to last to expire.\r",
									"function sortByExpirationDate(array) {\r",
									"  return array.sort(function(a,b) {\r",
									"    if(Date.parse(a.expiration_date) > Date.parse(b.expiration_date)) {\r",
									"      return 1;\r",
									"    } if (Date.parse(a.expiration_date) < Date.parse(b.expiration_date)) {\r",
									"      return -1;\r",
									"    } return 0;\r",
									"  });\r",
									"}\r",
									"\r",
									"function validateFlagFromBalance(arrayAvailables,jsonBalance){\r",
									"    for(let i=0 ; i<arrayAvailables.length ; i++){\r",
									"      if(arrayAvailables[i].unused_amount !== 0){\r",
									"        pm.expect(jsonBalance.has_details).to.be.equal(true);\r",
									"      }\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateRoaming(){\r",
									"  //If roaming responds with an error or the status is Inactivo the flag should be false.\r",
									"  if (roamingResponseCode != 200 || roamingResponse.status === \"Inactivo\") {\r",
									"    pm.expect(jsonData.is_roaming).to.be.false;\r",
									"  }else{\r",
									"    pm.expect(jsonData.is_roaming).to.be.true;\r",
									"  }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-balance/v4/balances/{{line_number}}",
							"host": [
								"{{host}}-balance"
							],
							"path": [
								"v4",
								"balances",
								"{{line_number}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Billing",
			"item": [
				{
					"name": "Invoices History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code != 204){",
									"    //Stores the response in JSON format.",
									"    var jsonData = pm.response.json().data;",
									"",
									"    //Stores the response in an environment variable.",
									"    pm.environment.set(\"responseInvoiceHistory\", jsonData);",
									"",
									"    //Stores the invoices != dummy.",
									"    var realInvoices = jsonData.invoices.filter( function (e) {",
									"        return e.status != \"dummy\";",
									"    });",
									"",
									"    //Stores the actual date in GMT-3 in MILISECONDS",
									"    var actualDate = Date.parse(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Buenos_Aires\"}));",
									"",
									"    if(jsonData.invoices.length === 0){",
									"        postman.setNextRequest(\"Voices\")",
									"    }",
									"}else{",
									"    postman.setNextRequest(\"Voices\")",
									"}",
									"",
									"pm.environment.set(\"responseCodeInvoiceHistory\", pm.response.code);",
									"",
									"//////////////////////////////////////////////////////////////////////////////////////",
									"",
									"//Skips if the user doesnt have bills.",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-7845] -[Validar ordenamiento por fecha de vencimiento descendente]\",function(){",
									"   descendingSort(); ",
									"});",
									"",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-9380/AC-9390/AC-9443] - [Validate the average for the last 12 months]\", function(){",
									"    //We always need to have 12 or more invoices.",
									"    pm.expect(jsonData.invoices.length).to.be.at.least(12);",
									"    getTwelveMonthsAverage(realInvoices);",
									"});",
									"",
									"//Skips if the user doesnt have bills.",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-9379] - [Validate the average for the last 6 months]\", function(){",
									"    getSixMonthsAverage(realInvoices);",
									"});",
									"",
									"//Skips if the user doesnt have bills.",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-10657]/[AC-10661] - [Validacion de los distintos status posibles para las facturas]\", function(){",
									"    statusCheck();",
									"});",
									"",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-14510/AC-14668] - Validar que las facturas en estado 'claim' y 'paid' tengan la propiedad account_number\", function() {",
									"    checkAccountNumber();",
									"});",
									"",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-15316] - Validar que las facturas en estado 'paid' tengan la propiedad 'pay_date'\", function() {",
									"    validatePaidInvoices();",
									"});",
									"",
									"(pm.response.code == 204 || jsonData.invoices.length === 0 ? pm.test.skip : pm.test)(\"[AC-15393/AC-15394] - [Validar fecha de vencimiento de las facturas segun el estado]\", function(){",
									"    validateInvoicesDates();",
									"});",
									"",
									"///////////////////////////////////////////////////////////////////////////////////////",
									"",
									"function paidDate(){",
									"    for(i=0 ; i<jsonData.invoices.length ; i++){",
									"        if(jsonData.invoices[i].pay_date){",
									"            pm.expect(Date.parse(jsonData.invoices[i].pay_date)).to.be.at.most(Date.parse(jsonData.invoices[i].due_date), \"Due date shouldn't be minor than pay_date\")",
									"        }",
									"    }",
									"}",
									"",
									"function descendingSort(){",
									"    for(i=0 ; i<jsonData.invoices.length ; i++){",
									"        for(j=i+1 ; j<jsonData.invoices.length ; j++){",
									"            pm.expect(Date.parse(jsonData.invoices[i].due_date)).to.be.at.least(Date.parse(jsonData.invoices[j].due_date),\"The order is wrong. It should be descending.\");",
									"        }",
									"    }",
									"}",
									"",
									"function getSixMonthsAverage(array) {",
									"    var total = 0.00;",
									"    var promedy = 0.00;",
									"    ",
									"    if(array.length < 6){",
									"        //Stores the total value of the invoices.",
									"        total = realInvoices.map(item => item.total_value.value).reduce((prev, next) => prev + next);",
									"        //Stores the promedy according to the amount of invoices.",
									"        promedy = total / realInvoices.length;",
									"        //Assert",
									"        pm.expect(jsonData.six_month_average_max.value).to.eql(parseFloat(Math.round(promedy * 100) / 100));",
									"    } else {",
									"        //Stores the total for the first 6 invoices.",
									"        for (var i = 0; i < 6; i++) {",
									"            total += array[i].total_value.value;",
									"        }",
									"        //Calculates the promedy.",
									"        promedy = total / 6;",
									"        //Assert",
									"        pm.expect(parseFloat(Math.round(promedy * 100) / 100)).to.be.at.most(jsonData.six_month_average_max.value);",
									"    }",
									"}",
									"",
									"function getTwelveMonthsAverage(array) {",
									"    //Sums the total value of all invoices and stores it.",
									"    var total = realInvoices.map(item => item.total_value.value).reduce((prev, next) => prev + next);",
									"    //Calculates the promedy",
									"    var promedy = total / realInvoices.length;",
									"    //Assert",
									"    pm.expect(parseFloat(promedy.toFixed(2))).to.be.at.most(jsonData.twelve_month_average_max.value);",
									"}",
									"",
									"function statusCheck(){",
									"    for(i=0 ; i<jsonData.invoices.length ; i++){",
									"",
									"    var status = [\"pending\",\"paid\",\"unpaid\",\"dummy\",\"claim\"];",
									"    ",
									"    pm.expect(jsonData.invoices[i].status).to.be.oneOf(status);",
									"    }",
									"}",
									"",
									"function checkAccountNumber() {",
									"    var filteredInvoices = jsonData.invoices.filter(function (e) {",
									"        return e.status == \"paid\" || e.status == \"claim\";",
									"    });",
									"    filteredInvoices.forEach(e => pm.expect(e).to.have.property(\"account_number\"));",
									"}",
									"",
									"function validatePaidInvoices() {",
									"    var filteredInvoices = jsonData.invoices.filter(function (e) {",
									"        return e.status == \"paid\";",
									"    });",
									"    filteredInvoices.forEach(e => pm.expect(e).to.have.property(\"pay_date\"));",
									"}",
									"",
									"//Validates the dates of the invoices and the status.",
									"function validateInvoicesDates() {",
									"    //Filters the invoices with the pending and unpaid ones.",
									"    var invoices = jsonData.invoices.filter(function (e) {",
									"        return e.status == \"pending\" || e.status == \"unpaid\";",
									"    });",
									"    ",
									"    //iterates over the invoices and validates the due date.",
									"    invoices.forEach(function (e) {",
									"        if(e.status == \"unpaid\"){",
									"            pm.expect(Date.parse(e.due_date)).to.be.below(actualDate);",
									"        }else{",
									"            pm.expect(Date.parse(e.due_date)).to.be.above(actualDate);",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-billing/v2/billings/{{line_number}}/invoices",
							"host": [
								"{{host}}-billing"
							],
							"path": [
								"v2",
								"billings",
								"{{line_number}}",
								"invoices"
							]
						},
						"description": "This endpoint returns the last 12 bills for the user. This endpoint should only work for users that are not prepay."
					},
					"response": []
				},
				{
					"name": "Invoice detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //Store de Response from Invoice History Endpoint",
									"    var responseInvoiceHistory = pm.environment.get(\"responseInvoiceHistory\");",
									"",
									"    var filterInvoices = responseInvoiceHistory.invoices.filter(e => e.status !== \"dummy\");",
									"//make an array with the Invoices ID different from dummy",
									"    var invoiceID = filterInvoices.map(function(e){",
									"\t\treturn e.invoice_id;",
									"        });",
									"        ",
									"    var invoicesID = pm.environment.get(\"invoicesID\");",
									"    ",
									"    if(!invoicesID){",
									"        invoicesID=invoiceID;",
									"    }",
									"    ",
									"    var currentFilter = invoicesID.shift();",
									"    pm.environment.set(\"invoiceID\",currentFilter);",
									"    pm.environment.set(\"invoicesID\",invoicesID);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format.",
									"var jsonData = pm.response.json().data;",
									"",
									"//Stores the invoices of the user obtained from the history in the pre request.",
									"var arrayInvoiceHistory = pm.variables.get(\"responseInvoiceHistory\");",
									"",
									"var invoicesID = pm.environment.get(\"invoicesID\");",
									"",
									"",
									"////////////////////////////////////////////////////////////////////////////////////////////////////",
									"",
									"//Setea que cuando no existen mas \"invoice ID\" se avance a la siguiente request de la colección.",
									"",
									"if (invoicesID && invoicesID.length > 0) {",
									"    postman.setNextRequest(\"Invoice detail\");",
									"} else {",
									"    pm.environment.unset(\"invoicesID\");",
									"    var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"    var servicesHome = postloginResponse.services.filter( function (e) {",
									"    return e.type == \"home\";",
									"    });",
									"    if (servicesHome.length == 0){",
									"        postman.setNextRequest(\"Voices\");",
									"    }    ",
									"",
									"}",
									"",
									"///////////////////////////////////////////////////////////////////////////////",
									"pm.test(\"[AC-11742] - Validar la consistencia entre el historial y el detalle de facturas.\", function () {",
									"    invoiceCheck();",
									"});",
									"",
									"pm.test(\"[AC-11271] Validar la fecha de pago en el detalle de la factura\", function () {",
									"    payDateValidation();",
									"});",
									"",
									"////////////////////////////////////////////////////////////////////////////////////////////////////",
									"",
									"//funcition development",
									"function invoiceCheck() {",
									"    var invoice = arrayInvoiceHistory.invoices.filter(function (arrayInvoiceHistory) {",
									"        return arrayInvoiceHistory.invoice_id == pm.variables.get(\"invoiceID\");",
									"    });",
									"",
									"    pm.expect(invoice[0].invoice_id).to.equal(jsonData.details.invoice_id);",
									"    pm.expect(invoice[0].due_date).to.equal(jsonData.details.due_date);",
									"    pm.expect(invoice[0].status).to.equal(jsonData.details.status);",
									"    pm.expect(invoice[0].account_number).to.equal(jsonData.details.account_number);",
									"    pm.expect(invoice[0].invoice_id).to.equal(jsonData.details.invoice_id);",
									"    pm.expect(invoice[0].total_value.value).to.equal(jsonData.details.cost.value);",
									"    pm.expect(invoice[0].total_value.formatted).to.equal(jsonData.details.cost.formatted);",
									"    ",
									"    //Validar este último assertion, en algunos casos falla porque cuando el valor de la factura es 0 no vien el campo cost_with_unit. Validar si es bug Linea 2324530765.",
									"    //pm.expect(invoice[0].total_value.formatted).to.equal(jsonData.details.cost_with_unit);",
									"}",
									"",
									"// mayor que cero",
									"function outstandingCheck() {",
									"    if (jsonData.outstanding_credit_with_unit < 0) {",
									"        pm.expect.fail(\"outstanding credit shouldnt be less than 0\");",
									"    }",
									"}",
									"//payDate siempre debe ser mayor ",
									"function payDateValidation() {",
									"    if (jsonData.details.status == \"paid\") {",
									"        pm.expect(Date.parse(jsonData.details.pay_date)).to.be.at.least(Date.parse(jsonData.details.generation_date));",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-billing/v2/billings/{{line_number}}/invoices/{{invoiceID}}",
							"host": [
								"{{host}}-billing"
							],
							"path": [
								"v2",
								"billings",
								"{{line_number}}",
								"invoices",
								"{{invoiceID}}"
							]
						},
						"description": "This endpoint returns the detail of a given invoice."
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Home Billing",
			"item": [
				{
					"name": "Historial de factura",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Store the response for info contracts\r",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"var customer = postloginResponse.customer;\r",
									"var services = postloginResponse.services;\r",
									" \r",
									"// Seteo las variables gender, documentNumber, contractNumber y documentType con sus respectivos valores para su uso en la llamada\r",
									"if (customer.document_type === 'DNI') {\r",
									"    pm.environment.set(\"gender\", customer.gender);\r",
									"}\r",
									"pm.environment.set(\"documentType\", customer.document_type);\r",
									"pm.environment.set(\"documentNumber\",customer.document);\r",
									" var servicesHome = postloginResponse.services.filter( function (e) {\r",
									"    return e.type == \"home\";\r",
									"});\r",
									"var contractsID = servicesHome.map(function (e) {\r",
									"     return e.subscription_id;\r",
									"});\r",
									"var contractsNumber = pm.environment.get(\"contractsNumber\");\r",
									" \r",
									"if (!contractsNumber) {\r",
									"    contractsNumber = contractsID;\r",
									"}\r",
									" \r",
									"var currentContract = contractsNumber.shift();\r",
									"pm.environment.set(\"contractNumber\", currentContract);\r",
									"pm.environment.set(\"contractsNumber\", contractsNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contractsNumber = pm.environment.get(\"contractsNumber\");\r",
									" \r",
									"//Setea que cuando no existen mas \"contracts Number\" se avance a la siguiente request de la colección.\r",
									"if (contractsNumber && contractsNumber.length > 0) {\r",
									"    postman.setNextRequest(\"Historial de factura\");\r",
									"} else {\r",
									"    pm.environment.unset(\"contractsNumber\");\r",
									"}\r",
									"\r",
									"var postLoginResponse = pm.environment.get(\"postloginResponse\")\r",
									"var customer = postLoginResponse.customer\r",
									"var services = postLoginResponse.services\r",
									"var params = pm.request.url.query.all()\r",
									"var genderParam = params.filter(function(param) {\r",
									"    return param.key === 'gender' && param.value !== ''\r",
									"});\r",
									"var gender = genderParam[0].value\r",
									"var documentTypeParam = params.find(function(param) {\r",
									"    return param.key === 'documentType' && param.value !== ''\r",
									"});\r",
									"var documentTypeParam = params.find(function(param) {\r",
									"    return param.key === 'documentType' && param.value !== ''\r",
									"    \r",
									"});\r",
									"//Stores the response in an environment variable.\r",
									"if(pm.response.code == 204){\r",
									"   \r",
									"    (documentTypeParam.value == \"DNI\" && genderParam.isEmpty() ? pm.test : pm.test.skip)(\"[ALM-20107] - [Validar que al ser el documentType DNI y el gender vacio el status code sea 204]\", function(){ \r",
									"            pm.response.to.have.status(204);\r",
									"        }\r",
									"    );\r",
									"      (documentTypeParam.value !==\"DNI\"? pm.test.skip : pm.test)(\"[ALM-20113] - [Validar que el servicio responda con un codigo 204 al enviar en el campo gender un valor distinto de F o M]\", function(){ \r",
									"        if(gender !== \"F\" &&  gender !==\"M\") {\r",
									"            pm.response.to.have.status(204);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    var jsonData = pm.response.json().data;\r",
									"      if(jsonData){\r",
									"        pm.environment.set(\"historialResponse\", jsonData);\r",
									"    }\r",
									"      pm.test(\"[ALM-20091] -  [Validar que el campo account_number coincida con el parametro contractNumber]\", function () {\r",
										"        jsonData.invoices.forEach(e => pm.expect(e.account_number).to.eql(pm.environment.get(\"contractNumber\")));\r",
										"    });\r",
									"     pm.test(\"[ALM-20094] - [Validar que las facturas vencidas tengan una fecha de vencimiento anterior a la fecha actual]\", function () {\r",
									"         var numberOfBills = jsonData.invoices.length;\r",
									"       for(var i = 0; i < numberOfBills - 1; i++){\r",
									"            var todaysDate = new Date();\r",
									"            todaysDate.setHours(0, 0, 0, 0);\r",
									"            if (jsonData.invoices[i].status == \"unpaid\"){\r",
									"                \r",
									"                pm.expect(Date.parse(jsonData.invoices[i].due_date)).to.be.lessThan(Date.parse(todaysDate))\r",
									"        }  \r",
									"      } \r",
									"    }) \r",
									"      pm.test(\"[ALM-20095] - [Validar que las facturas pendientes de pago aún no esten vencidas]\", function () {\r",
									"       var numberOfBills = jsonData.invoices.length;\r",
									"       for(var i = 0; i < numberOfBills - 1; i++){\r",
									"            var todaysDate = new Date();\r",
									"            todaysDate.setHours(0, 0, 0, 0);\r",
									"            if (jsonData.invoices[i].status == \"pending\"){\r",
									"                \r",
									"                pm.expect(Date.parse(todaysDate)).to.be.at.most(Date.parse(jsonData.invoices[i].due_date))\r",
									"            }           \r",
									"        }   \r",
									"    })\r",
									"\r",
									"}     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-home-billing/v3/billings/{{contractNumber}}/invoices?documentType={{documentType}}&gender={{gender}}&documentNumber={{documentNumber}}&invoiceCount=",
							"host": [
								"{{host}}-home-billing"
							],
							"path": [
								"v3",
								"billings",
								"{{contractNumber}}",
								"invoices"
							],
							"query": [
								{
									"key": "documentType",
									"value": "{{documentType}}"
								},
								{
									"key": "gender",
									"value": "{{gender}}"
								},
								{
									"key": "documentNumber",
									"value": "{{documentNumber}}"
								},
								{
									"key": "invoiceCount",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Voices",
			"item": [
				{
					"name": "Voices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"//stores the response for the market\r",
									"var market = pm.environment.get(\"market\");\r",
									"\r",
									"//stores the response for postlogin\r",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"\r",
									"//Stores the response of Invoice History endpoint and the code.\r",
									"var responseInvoiceHistory = pm.environment.get(\"responseInvoiceHistory\");\r",
									"\r",
									"//Stores the response of Invoice History endpoint, requested in the pre req scripts.\r",
									"var responseExtras_Giga = pm.variables.get(\"responseExtras_Giga\");\r",
									"var responseUpselling = pm.variables.get(\"responseUpselling\");\r",
									"\r",
									"//stores the response for the line status\r",
									"var lineStatusResponse = pm.variables.get(\"lineStatusResponse\");\r",
									"\r",
									"//stores the response for Balances\r",
									"var balancesResponse = pm.environment.get(\"balancesResponse\");\r",
									"\r",
									"var consumptionsResponse = pm.environment.get(\"consumptionsResponse\");\r",
									"\r",
									"//Stores the max length for the title of the voice.\r",
									"const titleLength = 50;\r",
									"\r",
									"//Stores the max length for the message of the voice.\r",
									"const messageLength = 140;\r",
									"\r",
									"//Stores the maximum possibles voices.\r",
									"const maxVoiceLength = 3;\r",
									"\r",
									"//stores the maximum amount of transactional voices.\r",
									"const maxVoiceTransactionalLength = 2;\r",
									"let priority;\r",
									"for(let i=0; i<jsonData.voice_list.length; i++){\r",
									"    if(jsonData.voice_list[i].priority=== 200 || jsonData.voice_list[i].priority=== 201 || jsonData.voice_list[i].priority=== 202){\r",
									"        priority = jsonData.voice_list[i].priority;\r",
									"    }\r",
									"}\r",
									"\r",
									"//Almaceno las Constantes comunes a los voices de recargas-sos y recargas-tc y RTD\r",
									"const DEEP_LINKING_TYPE=\"deep_linking\";\r",
									"const SOS_TC_TITLE=[\"¡Se agota tu crédito!\",\"¡Se agotó tu crédito!\"];\r",
									"const REC_PRIMARY_ACTION=\"Realizar recarga\";\r",
									"const REC_SECONDARY_ACTION=\"Recargar luego\";\r",
									"const PBU_TC_PRIMARY_ACTION=\"Recargar\";\r",
									"const PBU_TC_SECONDARY_ACTION=\"No, gracias\";\r",
									"\r",
									"\r",
									"//Consumo Excedente Upselling\r",
									"const CONSUMPTION = 219;\r",
									"var is_voice_present = false; \r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[AC-9574] - Validar tipo de voice\", function(){\r",
									"    validateVoice();\r",
									"});\r",
									"    \r",
									"pm.test(\"[AC-11255] - [Validar las condiciones del voice de estado de linea]\", function(){\r",
									"    voiceCondition();\r",
									"});\r",
									"pm.test(\"[AC-11256] - [Validar Priorización del Voice]\", function(){\r",
									"    voicePriority();\r",
									"});\r",
									"pm.test(\"[AC-11300/AC-11455] - Validar la cantidad máxima de voice. y caracteres\", function(){\r",
									"    VoiceCounter();\r",
									"});\r",
									"\r",
									"(pm.environment.get(\"lineStatusResponse\").status != \"Activo\" || pm.environment.get(\"responseCodeInvoiceHistory\") == 204 || market == \"prepago\" ? pm.test.skip : pm.test)(\"[AC-14055/AC-14062/AC-14013/ALM-12383] - Validar el voice de factura vencida\", function(){\r",
									"    if(pm.environment.get(\"responseCodeInvoiceHistory\") == 200){\r",
									"        voice_invoice();\r",
									"    }else{\r",
									"        pm.expect.fail(\"El servicio de Invoices da error.\")\r",
									"    }\r",
									"});\r",
									"\r",
									"(lineStatusResponse.status == \"Suspendido\" ? pm.test.skip : pm.test)(\"[AC-14106] - Validar tipo de voice Beneficios Giga, cuando el cliente tiene un pack de beneficios giga\", function(){\r",
									"    voice_gigaBenefits_check();\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-14112/AC-14117] - Validar GB y duración del beneficio Giga\", function(){\r",
									"    validateGigaBenefitsCoincidence();\r",
									"});\r",
									"\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"[AC-15194/ALM-12204/ALM-12289] - Validar que un usuario abono/pospago no tenga voice de Recarga SOS\", function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.url_redirect).to.not.eql(\"/recarga-sos\", \"Usuarios abono/pospago no pueden tener recharge_sos\");\r",
									"   });\r",
									"});\r",
									"\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"[ALM-12362/ALM-12363] - Validar que un usuario abono/pospago no tenga voice de Recarga de Tarjeta de Crédito\", function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.url_redirect).to.not.eql(\"/recarga-tc\", \"Usuarios abono/pospago no pueden tener recharge_tc\");\r",
									"   });\r",
									"});\r",
									"\r",
									"(market != \"prepago\" || balancesResponse.wallet.credit.value>50 || balancesResponse.has_debt ||  postloginResponse.logged_line.plan.is_basic_plan? pm.test.skip : pm.test)(\"[ALM-12322 / ALM-12338 / ALM-12339 / ALM-12319 / ALM-12318 / ALM-12321 / ALM-12658 / ALM-12659] - Validar Voice de recarga SOS\", function(){\r",
									"        const SOS_MESSAGE=\"Realizá una Recarga SOS para continuar navegando por tus aplicaciones preferidas\";\r",
									"        const URL_REDIRECT=\"/recarga-sos\";\r",
									"        const SOS_PRIORITY=406;\r",
									"        if(balancesResponse.wallet.credit.value>0){\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,SOS_PRIORITY,SOS_TC_TITLE[0],SOS_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"\r",
									"            }else{\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,SOS_PRIORITY,SOS_TC_TITLE[1],SOS_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"            }\r",
									"        pm.expect(is_voice_present).to.be.eql(true,\"El voice esperado no esta presente\");\r",
									"});\r",
									"\r",
									"(market != \"prepago\" || balancesResponse.wallet.credit.value>50 || !balancesResponse.has_debt ? pm.test.skip : pm.test)(\"[ALM-12206 / ALM-12205 / ALM-12236 / ALM-12235 / ALM-12237 / ALM-12361 / ALM-12360 / ALM-12660 / ALM-12661] - Validar Voice de recarga TC\", function(){\r",
									"        const RECHARGE_TC_MESSAGE=\"Realizá una Recarga para seguir navegando. ¡Te regalamos un 20% extra si recargás desde la App!\";\r",
									"        const URL_REDIRECT=\"/recarga-tc\";\r",
									"        const TC_PRIORITY=406;\r",
									"        if(balancesResponse.wallet.credit.value>0){\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,TC_PRIORITY,SOS_TC_TITLE[0],RECHARGE_TC_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"\r",
									"            }else{\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,TC_PRIORITY,SOS_TC_TITLE[1],RECHARGE_TC_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"            }\r",
									"        pm.expect(is_voice_present).to.be.eql(true,\"El voice esperado no esta presente\");\r",
									"        \r",
									"});\r",
									"\r",
									"(market == \"prepago\" || !has_consumptions_over(CONSUMPTION) || !has_destination_plans()? pm.test.skip : pm.test)(\"[ALM-15490/ALM-15491/ALM-15488/ALM-15504/ALM-15492/ALM-15489/ALM-15487/ALM-15493] - Validar Voice de Upselling\", function(){\r",
									"        const UPSELLING_TITLE = \"<b>Tenemos un Plan más adecuado para vos</b>\";\r",
									"        const UPSELLING_MESSAGE=\"Mejorá tu Plan a\";\r",
									"        const UPSELLING_PRIMARY_ACTION=\"Ver Plan\";\r",
									"        const UPSELLING_SECONDARY_ACTION=\"No, gracias\";\r",
									"        const URL_REDIRECT=\"/packs-adicionales/planes/\";\r",
									"        const UPSELLING_PRIORITY=405;\r",
									"        validateTransactionVoices(DEEP_LINKING_TYPE,UPSELLING_PRIORITY,UPSELLING_TITLE,UPSELLING_MESSAGE,UPSELLING_PRIMARY_ACTION,UPSELLING_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"});\r",
									"\r",
									"(market == \"prepago\" || has_consumptions_over(CONSUMPTION) ? pm.test.skip : pm.test)(\"[ALM-15498] - Validar que no tenga voice de Upselling un usuario con consumos excedentes menor a \"+CONSUMPTION, function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.priority).not.to.be.eql(405, \"Usuarios sin consumo excedente valido no pueden tener voice de Upselling\");\r",
									"   });\r",
									"});\r",
									"\r",
									"(market == \"prepago\" || has_destination_plans() ? pm.test.skip : pm.test)(\"[ALM-15502] - Validar que no tenga voice de Upselling un usuario sin plan destino\", function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.priority).not.to.be.eql(405, \"Usuarios sin plan destino no pueden tener voice de Upselling\");\r",
									"   });\r",
									"});\r",
									"\r",
									"(market == \"prepago\" || lineStatusResponse.status_code!=2 ? pm.test.skip : pm.test)(\"[ALM-12564] - Validar voice de Disney+ \", function(){\r",
									"    const DISNEY_PRIORITY=404;\r",
									"    const DISNEY_TYPE=\"event\";\r",
									"    const DISNEY_TITLE=\"¡Disfrutá de Disney+!\";\r",
									"    const DISNEY_MESSAGE=\"No te pierdas tus <b>series y películas</b> favoritas en <b>un solo lugar</b>. ¡Aprovechá la <b>promoción</b> que tenemos para vos!\";\r",
									"    const DISNEY_BUTTONS=[\"Ver más\",\"No, gracias\"];\r",
									"    const DISNEY_URL_REDIRECT=\"https://suscripcion\";\r",
									"    validateTransactionVoices(DISNEY_TYPE,DISNEY_PRIORITY,DISNEY_TITLE,DISNEY_MESSAGE,DISNEY_BUTTONS[0],DISNEY_BUTTONS[1],DISNEY_URL_REDIRECT,null);\r",
									"});\r",
									"\r",
									"(market != \"prepago\"||lineStatusResponse.status_code!=2? pm.test.skip : pm.test )(\"[ALM-13399] - Validar que usuario prepago no posea voice de Disney+ \", function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.priority).to.not.eql(404, \"Usuarios prepago no pueden tener voice de Disney+\");\r",
									"   });\r",
									"});\r",
									"\r",
									"(lineStatusResponse.status != \"Suspendido\" ? pm.test.skip : pm.test)(\"[AC-15269 / AC-15268 / AC-15356 / AC-15365 / AC-15267 / ALM-11896] - Validar los distintos voice de estado de linea\", function () {\r",
									"    voice_response_check();\r",
									"});\r",
									"let priorities = [];\r",
									"jsonData.voice_list.forEach(function(e){\r",
									"    priorities.push(e.priority)\r",
									"    });\r",
									"\r",
									"(market == \"prepago\" || !priorities.includes(301) ? pm.test.skip : pm.test)(\"[ALM-17357/ALM-17567/ALM-17599/ALM-17600/ALM-17568/ALM-17387 - Validar voice de oferta de verano\", function(){\r",
									"    const ENERO = new Date(2021,0,4,9,0,0).getTime();\r",
									"    const FEBRERO = new Date(2021,1,1,9,0,0).getTime();\r",
									"    const MARZO = new Date(2021,2,3,9,0,0).getTime();\r",
									"    \r",
									"    const OFFER_VER_PRIORITY=301;\r",
									"    const OFFER_VER_TYPE=\"giga_benefits\";\r",
									"    const OFFER_VER_TITLE=\"¡Llevate tu internet a donde vayas!\";\r",
									"    const OFFER_VER_BUTTONS=[\"Obtener\",\"No, gracias\"];\r",
									"    let mesActual = \"\";\r",
									"    if(Date.now() > ENERO && Date.now() < FEBRERO){\r",
									"        mesActual = \"enero\"\r",
									"    }else if (Date.now() > FEBRERO && Date.now() < MARZO){\r",
									"        mesActual = \"febrero\"\r",
									"    }\r",
									"    const OFFER_VER_MESSAGE=\"Durante \" + mesActual + \", por tener servicios de <B>Personal y Fibertel</B> accedé a <B>10 GB</B> extras durante <B>30 días</B>.\";\r",
									"    validateTransactionVoices(OFFER_VER_PRIORITY, OFFER_VER_TYPE,OFFER_VER_TITLE,OFFER_VER_MESSAGE,OFFER_VER_BUTTONS[0],OFFER_VER_BUTTONS[1], null);\r",
									"});\r",
									"\r",
									"(market !== \"prepago\" ? pm.test.skip : pm.test )(\"[ALM-17217] - Validar que en Voice List NO retorne Oferta de Verano, con linea PREPAGO \", function(){\r",
									"    jsonData.voice_list.forEach(function(e) {\r",
									"       pm.expect(e.priority).to.not.eql(301);\r",
									"   });\r",
									"});\r",
									"(market == \"prepago\" || !priorities.includes(301) ? pm.test.skip : pm.test)(\"[ALM-17592] - Validar item_id del voice de Oferta de Verano \", function () {\r",
									"    validateItem_id();\r",
									"});\r",
									"\r",
									"(!priorities.includes(403) ? pm.test.skip : pm.test)(\"[ALM-16311/ALM-18785/ALM-18787/ALM-18811/ALM-18780/ALM-18850] - Validar voices de RTD CASH_IN \", function () {\r",
									"    const RTD_CASH_IN_TITLE=\"¡Recargá ahora!\"\r",
									"    const URL_REDIRECT=\"/recarga-tc?amount=100.0\";\r",
									"    const RTD_CASH_IN_PRIORITY=403;\r",
									"    const RTD_TYPE=\"cash_in\";\r",
									"    validateTransactionVoices(DEEP_LINKING_TYPE,RTD_CASH_IN_PRIORITY,RTD_CASH_IN_TITLE,null,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,RTD_TYPE);\r",
									"});\r",
									"\r",
									"(!priorities.includes(401) ? pm.test.skip : pm.test)(\"[ALM-18781/ALM-18784/ALM-16770/ALM-18786/ALM-18812/ALM-18849] - Validar voices de RTD CASH_OUT \", function () {\r",
									"    const RTD_CASH_OUT_TITLE=\"¡No te quedes sin internet!\";\r",
									"    const URL_REDIRECT=\"/packs-adicionales/\";\r",
									"    const RTD_CASH_OUT_BUTTONS=[\"Comprar\",\"No, gracias\"];\r",
									"    const RTD_CASH_OUT_PRIORITY=401;\r",
									"    const RTD_TYPE=\"cash_out\"\r",
									"    validateTransactionVoices(DEEP_LINKING_TYPE,RTD_CASH_OUT_PRIORITY,RTD_CASH_OUT_TITLE,null,RTD_CASH_OUT_BUTTONS[0],RTD_CASH_OUT_BUTTONS[1],URL_REDIRECT,RTD_TYPE);\r",
									"});\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan  || balancesResponse.wallet.credit.value>50 || !postloginResponse.logged_line.plan.is_basic_plan? pm.test.skip : pm.test)(\"[ALM-19380 / ALM-19386 / ALM-19385 / ALM-19382 / ALM-19387 / ALM-19381 / ALM-19383 / ALM-19388 / ALM-19384] - Validar Voice de PBU canal app\", function(){\r",
									"        const PBU_MESSAGE=\"Recargá crédito para realizar llamadas y mantenerte conectado con tus aplicaciones favoritas.\";\r",
									"        const PBU_PRIORITY=406;\r",
									"        const URL_REDIRECT=\"/recarga-tc\";\r",
									"        if(balancesResponse.wallet.credit.value>0){\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,PBU_PRIORITY,SOS_TC_TITLE[0],PBU_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"        }else{\r",
									"                validateTransactionVoices(DEEP_LINKING_TYPE,PBU_PRIORITY,SOS_TC_TITLE[1],PBU_MESSAGE,REC_PRIMARY_ACTION,REC_SECONDARY_ACTION,URL_REDIRECT,null);\r",
									"    }\r",
									"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function validateVoice(){\r",
									"    for(i=0; i < jsonData.voice_list.length; i++){\r",
									"           \r",
									"           if(jsonData.voice_list[i].primary_action && jsonData.voice_list[i].secondary_action){\r",
									"               if(jsonData.voice_list[i].type == \"generic\"){\r",
									"                   pm.expect.fail(\"Los mensajes de saludo no poseen botones.\");\r",
									"               }\r",
									"           }\r",
									"       }    \r",
									"       \r",
									"}\r",
									"\r",
									"function voiceCondition(){\r",
									"    let acum =0;\r",
									"    let voiceLineStatus = jsonData.voice_list.filter(voice => jsonData.voice_list.type === \"line-state\");\r",
									"    if(voiceLineStatus.length >0){\r",
									"        pm.expect(jsonData.voice_list.length).to.eql(voiceLineStatus);\r",
									"    }\r",
									"}\r",
									"\r",
									"function VoiceCounter(){\r",
									"    let acum =0;\r",
									"    for(let i = 0; i< jsonData.voice_list.length ; i++){\r",
									"        pm.expect(jsonData.voice_list[i].title.length).to.be.at.most(titleLength);\r",
									"        pm.expect(jsonData.voice_list[i].message.length).to.be.at.most(messageLength);\r",
									"        if(jsonData.voice_list[i].primary_action&&jsonData.voice_list[i].primary_action!=\"Ver Plan\" && jsonData.voice_list[i].type!=\"giga_benefits\"){\r",
									"            //cuenta la cantidad de voice transaccionales\r",
									"            acum ++;\r",
									"        }\r",
									"    }\r",
									"    //cantidad máxima de voice\r",
									"    pm.expect(jsonData.voice_list.length).to.be.at.most(maxVoiceLength);\r",
									"    //cantidad máxima de voice transaccionales\r",
									"    pm.expect(acum).to.be.at.most(maxVoiceTransactionalLength);\r",
									"}\r",
									"\r",
									"function voicePriority(){\r",
									"    for(let i = 0; i< (jsonData.voice_list.length -1) ; i++){\r",
									"       pm.expect(jsonData.voice_list[i].priority).to.be.below(jsonData.voice_list[i+1].priority);\r",
									"    }\r",
									"}\r",
									"\r",
									"function voice_invoice(){\r",
									"    if(lineStatusResponse.status !== \"Suspendido\"){\r",
									"        const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo','Junio','Julio','Agosto','Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\r",
									"        //creo un array con el voice de factura vencida\r",
									"        let voiceFilter = jsonData.voice_list.filter(e => e.title == \"Factura Vencida\");\r",
									"        //creo un array con la o las facturas vencidas\r",
									"        let invoiceFilter = responseInvoiceHistory.invoices.filter(e => e.status === \"unpaid\");\r",
									"\r",
									"        if(invoiceFilter.length >=1){\r",
									"        //si tengo almenos 1 factura en estado inpago , valido que se muestre el voice\r",
									"            pm.expect(voiceFilter.length).to.be.at.least(1);\r",
									"        //comienzo de aqui para abajo a validar la coincidencia del mes.\r",
									"            let fecha = new Date(invoiceFilter[0].due_date);\r",
									"            let currentMonth = fecha.getMonth();\r",
									"            currentMonth = meses[currentMonth];\r",
									"            let monthMessage;\r",
									"        //recorro todos los meses y comparo , cada mes , lo comparo a current month y a su vez busuco que ese mes que comparoo se encuentre dentro del mensaje \r",
									"            pm.expect(voiceFilter[0].message).contains(currentMonth);\r",
									"            if(pm.environment.name == \"TECO_PROD\"){\r",
									"                pm.expect(voiceFilter[0].url_redirect).to.include(\"https://pagos.telecom.com.ar/\");\r",
									"            }else{\r",
									"                pm.expect(voiceFilter[0].url_redirect).to.include(\"https://pagosuat.telecom.com.ar/\");\r",
									"            }\r",
									"    }\r",
									"    }\r",
									"}\r",
									"\r",
									"function voice_gigaBenefits_check(){\r",
									"    if(responseExtras_Giga.offers.length >=1){\r",
									"            let voiceFilter = jsonData.voice_list.filter(e => e.type == \"giga_benefits\");\r",
									"    //si tengo disponible un voice de beneficio giga en extras, entonces tengo que ver un voice de dicho tipo \r",
									"    if(responseExtras_Giga.offers[0].is_available=== true){\r",
									"        pm.expect(voiceFilter.length).to.be.equal(1);\r",
									"    }\r",
									"    }\r",
									"}\r",
									"//Validación del voice Filter\r",
									"function validateVoiceEvent(){\r",
									"    let voiceFilter = jsonData.voice_list.filter(e => e.type == \"event\" && e.priority === 603);\r",
									"    if(voiceFilter.length >= 1){\r",
									"        for(let i=0 ; i<voiceFilter.length ; i++){\r",
									"            pm.expect(voiceFilter[i].url_redirect).to.be.a('string');\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateGigaBenefitsCoincidence(){\r",
									"    let gigaBenefitsVoice = jsonData.voice_list.filter(e => e.type === \"giga_benefits\");\r",
									"\r",
									"    if(gigaBenefitsVoice.length>0){\r",
									"        if(responseExtras_Giga.offers[0].duration.amount==1){\r",
									"            pm.expect(gigaBenefitsVoice[0].message).contains(responseExtras_Giga.offers[0].duration.amount*24);\r",
									"        }else{\r",
									"            pm.expect(gigaBenefitsVoice[0].message).contains(responseExtras_Giga.offers[0].duration.amount);\r",
									"        }\r",
									"        pm.expect(gigaBenefitsVoice[0].message).contains(responseExtras_Giga.offers[0].data.amount)\r",
									"        pm.expect(gigaBenefitsVoice[0].item_id).to.be.equal(responseExtras_Giga.offers[0].id);\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"function voice_response_check() {\r",
									"\r",
									"    const siniestro_title = \"Línea suspendida por siniestro\" ;\r",
									"    const siniestro_message = \"Acercate a un Centro de Atención para pedir un <b>Chip Personal</b> y realizá la reactivación de tu línea.\";\r",
									"    const siniestro_pa = \"Ver Oficinas\";\r",
									"    const siniestro_url = \"https://uat.personal.com.ar/ayudaysoporte/centrosdeatencion\";\r",
									"\r",
									"    const pago_title =\"Línea suspendida por falta de pago\" ;\r",
									"    const pago_message = \"Tenés una deuda y debés pagarla para reactivar la línea.\";\r",
									"    const pago_pa = \"Saldar deuda\" ;\r",
									"    const pago_url = \"https://pagosuat.telecom.com.ar/pages/payment/phone/\" + pm.variables.get(\"line_number\") + \"?utm_source=App&utm_medium=btn_pagos_voice&utm_term=&utm_content=&utm_campaign=Switch\";\r",
									"\r",
									"    const fraude_title= \"Línea suspendida\" ;\r",
									"    const fraude_message = \"Encontramos movimientos sospechosos en tu línea. Comunicate desde otro teléfono al <b>0800-888-8000</b> o daremos de baja el Servicio.\";\r",
									"\r",
									"    const adm_title = \"Línea suspendida\";\r",
									"    const adm_message = \"Tu línea se encuentra suspendida por problemas administrativos. Llamá al <b>*111</b> desde otra línea <b>Personal</b> para conocer los pasos a seguir.\" ;\r",
									"\r",
									"    const voluntaria_title = \"Suspensión de línea voluntaria\";\r",
									"    const voluntaria_message = \"Tu solicitud de suspensión de línea fue realizada con éxito. Si querés reactivarla, tenés que comunicarte al <b>*111</b>.\";\r",
									"    const voluntaria_pa = \"Llamar al *111\" ;\r",
									"    const voluntaria_clickToCall = \"*111\";\r",
									"\r",
									"    for (let i = 0; i < jsonData.voice_list.length; i++) {\r",
									"        switch (jsonData.voice_list[i].priority) {\r",
									"            case 101:\r",
									"                pm.expect(jsonData.voice_list[i].type).to.eql(\"event\");\r",
									"                pm.expect(jsonData.voice_list[i].title).to.eql(siniestro_title);\r",
									"                pm.expect(jsonData.voice_list[i].message).to.eql(siniestro_message);\r",
									"                pm.expect(jsonData.voice_list[i].primary_action).to.eql(siniestro_pa);\r",
									"                pm.expect(jsonData.voice_list[i].url_redirect).to.eql(siniestro_url);\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('expiration_date');\r",
									"                break;\r",
									"            case 102:\r",
									"                pm.expect(jsonData.voice_list[i].type).to.eql(\"event\");\r",
									"                pm.expect(jsonData.voice_list[i].title).to.eql(pago_title);\r",
									"                pm.expect(jsonData.voice_list[i].message).to.eql(pago_message);\r",
									"                pm.expect(jsonData.voice_list[i].primary_action).to.eql(pago_pa);\r",
									"                pm.expect(jsonData.voice_list[i].url_redirect).to.eql(pago_url);\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('secondary_action');\r",
									"                break;\r",
									"            case 100:\r",
									"                pm.expect(jsonData.voice_list[i].type).to.eql(\"generic_white\");\r",
									"                pm.expect(jsonData.voice_list[i].title).to.eql(fraude_title);\r",
									"                pm.expect(jsonData.voice_list[i].message).to.eql(fraude_message);\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('primary_action');\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('url_redirect');\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('secondary_action');\r",
									"                break;\r",
									"            case 103:\r",
									"                pm.expect(jsonData.voice_list[i].type).to.eql(\"generic_white\");\r",
									"                pm.expect(jsonData.voice_list[i].title).to.eql(adm_title);\r",
									"                pm.expect(jsonData.voice_list[i].message).to.eql(adm_message);\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('primary_action');\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('url_redirect');\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('secondary_action');\r",
									"                break;\r",
									"            case 104:\r",
									"                pm.expect(jsonData.voice_list[i].type).to.eql(\"call\");\r",
									"                pm.expect(jsonData.voice_list[i].title).to.eql(voluntaria_title);\r",
									"                pm.expect(jsonData.voice_list[i].message).to.eql(voluntaria_message);\r",
									"                pm.expect(jsonData.voice_list[i].primary_action).to.eql(voluntaria_pa);\r",
									"                pm.expect(jsonData.voice_list[i].click_to_call).to.eql(voluntaria_clickToCall);\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('url_redirect');\r",
									"                pm.expect(jsonData.voice_list[i]).to.not.have.property('secondary_action');\r",
									"                break;\r",
									"            default: \r",
									"                pm.expect.fail(\"bug o caso no contemplado\");\r",
									"                break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateRoamingData(type,title,message){\r",
									"    const PRIMARY_ACTION = \"Ver Packs\";\r",
									"    const SECONDARY_ACTION = \"No, gracias\";\r",
									"    const URL_REDIRECT = \"/packs-adicionales/packs/roaming\";\r",
									"    for(let i=0; i<jsonData.voice_list.length;i++){\r",
									"        if (jsonData.voice_list[i].priority === 202 || jsonData.voice_list[i].priority === 201 ) {\r",
									"            pm.expect(jsonData.voice_list[i].type).to.eql(type);\r",
									"            pm.expect(jsonData.voice_list[i].title).to.eql(title);\r",
									"            pm.expect(jsonData.voice_list[i].message).to.eql(message);\r",
									"            pm.expect(jsonData.voice_list[i].primary_action).to.eql(PRIMARY_ACTION);\r",
									"            pm.expect(jsonData.voice_list[i].secondary_action).to.eql(SECONDARY_ACTION);\r",
									"            pm.expect(jsonData.voice_list[i].url_redirect).to.eql(URL_REDIRECT);\r",
									"        }else if (jsonData.voice_list[i].priority == 200) {\r",
									"            pm.expect(jsonData.voice_list[i].type).to.eql(type);\r",
									"            pm.expect(jsonData.voice_list[i].title).to.eql(title);\r",
									"            pm.expect(jsonData.voice_list[i].message).to.eql(message);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateTransactionVoices(type,priority,title,message,primary_action,secondary_action,url_redirect, rtd_type){\r",
									"    jsonData.voice_list.forEach(function(e){\r",
									"        if(e.priority===priority){\r",
									"            pm.expect(e.type).to.eql(type);\r",
									"            pm.expect(e.title).to.eql(title);\r",
									"            if(message!=null){\r",
									"                pm.expect(e.message).to.include(message);\r",
									"            }\r",
									"            pm.expect(e.primary_action).to.eql(primary_action);\r",
									"            pm.expect(e.secondary_action).to.eql(secondary_action);\r",
									"            if(e.priority != 301){\r",
									"                pm.expect(e.url_redirect).to.include(url_redirect);\r",
									"            }\r",
									"            if(rtd_type!=null){\r",
									"                pm.expect(e.info.rtd_type).to.eql(rtd_type);\r",
									"            }\r",
									"            is_voice_present = true;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function has_consumptions_over(consumption){\r",
									"    return consumptionsResponse.bill.total_consumption.value > consumption;\r",
									"}\r",
									"\r",
									"function has_destination_plans(){\r",
									"    return responseUpselling.length>1;\r",
									"}\r",
									"\r",
									"function validateItem_id(){     \r",
									"    jsonData.voice_list.forEach(function(e){   \r",
									"         if(e.priority===301){   \r",
									"            pm.expect(e.item_id).to.be.eql(\"10000720-FAN_PRDA_00164\");         \r",
									"        }         \r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"market\", pm.environment.get(\"market\"));\r",
									"\r",
									"//Stores the request for Extras with giga benefits filter endpoint.\r",
									"var requestExtrasEndpoint = pm.variables.get(\"host\") + \"-extra/v3/payments/\" + pm.variables.get(\"line_number\") + \"/extras?type=giga_benefits\";\r",
									"\r",
									"//Stores the request for Upselling - Listado de planes\r",
									"var requestUpselling = pm.variables.get(\"host\") + \"-upselling/v1/upselling/\" + pm.variables.get(\"line_number\") + \"/\"+pm.environment.get(\"plan_code\")+\"/to\";\r",
									"\r",
									"\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"getExtrasGiga(requestExtrasEndpoint);\r",
									"getUpsellingResponse(requestUpselling);\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Calls Extras endpoint and sets variables that stores  information used on the scripts.\r",
									"function getExtrasGiga(request) {\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the source name and the JWT.\r",
									"        header: {\r",
									"            \"X-Source-Name\": \"ANDROID\",\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson = response.json().data;\r",
									"        //Creates a variable that stores the user type.\r",
									"        pm.variables.set(\"responseExtras_Giga\", responseJson);\r",
									"    });\r",
									"}\r",
									"\r",
									"function getUpsellingResponse(request) {\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the source name and the JWT.\r",
									"        header: {\r",
									"            \"X-Source-Name\": \"ANDROID\",\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson = response.json().data;\r",
									"        //Creates a variable that stores the user type.\r",
									"        pm.variables.set(\"responseUpselling\", responseJson);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-notification/v3/notification/voices/{{line_number}}?market={{market}}",
							"host": [
								"{{host}}-notification"
							],
							"path": [
								"v3",
								"notification",
								"voices",
								"{{line_number}}"
							],
							"query": [
								{
									"key": "market",
									"value": "{{market}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Extras",
			"item": [
				{
					"name": "Extra Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Stores the request URL for the extra type PACKS",
									"var requestExtraTypePacks = pm.variables.get(\"host\") + \"-extra/v3/payments/\" + pm.variables.get(\"line_number\") + \"/extras?type=packs\";",
									"",
									"//Stores the request URL for the extra type PASES",
									"var requestExtraTypePasses = pm.variables.get(\"host\") + \"-extra/v3/payments/\" + pm.variables.get(\"line_number\") + \"/extras?type=passes\";",
									"",
									"//Stores the request URL for the extra type VIVÍ RECARGADO",
									"var requestExtraTypeLiveRecharged = pm.variables.get(\"host\") + \"-extra/v3/payments/\" + pm.variables.get(\"line_number\") + \"/extras?type=live_recharged\";",
									"",
									"var requestMongo = pm.variables.get(\"config_params\")+\"/v1/packs\";",
									"",
									"getExtras();",
									"getMongoInformation();",
									"",
									"function getExtras() {",
									"    pm.sendRequest({",
									"        url: requestExtraTypePacks,",
									"        //Configurates the header of the request with the source name and the JWT.",
									"        header: {",
									"            \"X-Source-Name\": \"ANDROID\",",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")",
									"        },",
									"    },  function (err, response) {",
									"    var responseJson = response.json().data;",
									"    pm.variables.set(\"responsePacks\", responseJson.best_deal);",
									"    });",
									"",
									"    pm.sendRequest({",
									"        url: requestExtraTypePasses,",
									"        //Configurates the header of the request with the source name and the JWT.",
									"        header: {",
									"            \"X-Source-Name\": \"ANDROID\",",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")",
									"        },",
									"    },  function (err, response) {",
									"    var responseJson = response.json().data;",
									"    pm.variables.set(\"responsePasses\", responseJson.best_deal);",
									"    });",
									"    ",
									"    //Calls the extra type live_recharged",
									"    pm.sendRequest({",
									"        url: requestExtraTypeLiveRecharged,",
									"        //Configurates the header of the request with the source name and the JWT.",
									"        header: {",
									"            \"X-Source-Name\": \"ANDROID\",",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")",
									"        },",
									"    },  function (err, response) {",
									"    var responseJson = response.json().data;",
									"    pm.variables.set(\"responseLiveRecharged\", responseJson.best_deal);",
									"    });",
									"}",
									"",
									"function getMongoInformation(){",
									"    pm.sendRequest({",
									"        url: requestMongo,",
									"        header: {",
									"            \"X-Source-Name\": \"ANDROID\",",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")",
									"        },",
									"    }, function(err, response){",
									"        let responseJson = response.json();",
									"        pm.variables.set(\"bestDeals\", responseJson.filter(function (e){",
									"            return e.best_deal == true;",
									"        }));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the response in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"//Stores the user type.\r",
									"var market = pm.environment.get(\"market\");\r",
									"\r",
									"//Stores the response for the extra PACKS, requested in the pre req scripts.\r",
									"var responsePacks = pm.variables.get(\"responsePacks\");\r",
									"\r",
									"//Stores the response for the extra PASSES, requested in the pre req scripts.\r",
									"var responsePasses = pm.variables.get(\"responsePasses\");\r",
									"\r",
									"//Stores the response for the extra LIVE RECHARGED, requested in the pre req scripts.\r",
									"var responseLiveRecharged = pm.variables.get(\"responseLiveRecharged\");\r",
									"\r",
									"//Stores the response for URL IMAGES\r",
									"var imgPack = \"https://resources.telecom.com.ar/agestion/images/extras/packs_opt.jpg\";\r",
									"var imgPasses = \"https://resources.telecom.com.ar/agestion/images/extras/passes_opt.jpg\";\r",
									"var imgPlans = \"https://resources.telecom.com.ar/agestion/images/extras/plans_opt.jpg\";\r",
									"\r",
									"\r",
									"///////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[AC-9559] - Validación de tipos de extras devueltos por el servicio de acuerdo al tipo de usuario\", function () {\r",
									"    validateTypes();\r",
									"});\r",
									"\r",
									"(!jsonData.best_deal ? pm.test.skip : pm.test)(\"[ALM-20443/ALM-20475] - [Validar el pay_method de la oferta best_deal]\", function () {\r",
									"    validatePayMethod();\r",
									"});\r",
									"\r",
									"(!responsePacks ? pm.test.skip : pm.test)(\"[ALM-20470] - [ Validar coincidencia del objeto best_deal con el filtro PACKS]\", function () {\r",
									"    validateCoincidenceOfBestDealBetweenTypes(responsePacks);\r",
									"});\r",
									"\r",
									"(!responsePasses ? pm.test.skip : pm.test)(\"[ALM-20473] - [ Validar coincidencia del objeto best_deal con el filtro PASSES]\", function () {\r",
									"    validateCoincidenceOfBestDealBetweenTypes(responsePasses);\r",
									"});\r",
									"\r",
									"(!responseLiveRecharged ? pm.test.skip : pm.test)(\"[ALM-20474] - [ Validar coincidencia del objeto best_deal con el filtro LIVE_RECHARGED]\", function () {\r",
									"    validateCoincidenceOfBestDealBetweenTypes(responseLiveRecharged);\r",
									"});\r",
									"\r",
									"\r",
									"(!jsonData.best_deal ? pm.test.skip : pm.test)(\"[ALM-20471]/[ALM-20471] - [Validar las imagenes del best_deal segun el canal por el que se envian]\", function () {\r",
									"    channelValidation_Image();\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"[ALM-11701 \\ ALM-11710] - Validar que en el campo type no devuelva el valor passes, cuando sea linea prepago\", function () {\r",
									"    validatePassesOption();\r",
									"});\r",
									"\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"[ALM-19072/ALM-19073/ALM-19074] Validar imagenes de packs, pases y planes\", function(){\r",
									"    jsonData.types.forEach(e => {\r",
									"    switch (e.type) {\r",
									"        case \"packs\":\r",
									"            pm.expect(e.image).to.be.eql(imgPack);\r",
									"            break;\r",
									"        case \"passes\":\r",
									"            pm.expect(e.image).to.be.eql(imgPasses);\r",
									"            break;\r",
									"        case \"plans\":\r",
									"            pm.expect(e.image).to.be.eql(imgPlans);\r",
									"            break;\r",
									"            default:\r",
									"            pm.expect.fail(\"Caso no conteplado\");\r",
									"            break;\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function validateTypes() {\r",
									"    jsonData.types.forEach(e => {\r",
									"        switch (e.type) {\r",
									"            case \"packs\":\r",
									"                validateDetails(e.type, e.title, e.description);\r",
									"                break;\r",
									"            case \"live_recharged\":\r",
									"                // El usuario prepago es el único que puede tener vivi recargado.\r",
									"                if (market !== null) {\r",
									"                    if (market != \"prepago\") {\r",
									"                        pm.expect.fail(\"Viví recargado es solo para usuarios prepago, y el usuario actual es \" + market);\r",
									"                    }\r",
									"                } else {\r",
									"                    pm.expect.fail(\"Market en postlogin es null\");\r",
									"                }\r",
									"                validateDetails(e.type, e.title, e.description);\r",
									"                break;\r",
									"            case \"passes\":\r",
									"                validateDetails(e.type, e.title, e.description);\r",
									"                break;\r",
									"            case \"plans\":\r",
									"                validateDetails(e.type, e.title, e.description);\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"El tipo: \" + e.type + \", no está siendo contemplado actualmente.\");\r",
									"                break;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function validateDetails(type, title, description) {\r",
									"\r",
									"    const packsDescription = \"Elegí el que más te convenga.\";\r",
									"    const liveRechargedDescription = \"Revisá el mejor pack que Personal tiene para vos.\";\r",
									"    const passesDescription = \"Disfrutá las mejores aplicaciones sin preocupaciones.\";\r",
									"    const plansDescription = \"Elegí el mejor plan para vos.\";\r",
									"\r",
									"    switch (type) {\r",
									"        case \"Pack\":\r",
									"            if (title != \"Packs\" || description != packsDescription) {\r",
									"                pm.expect.fail(\"Error in: \" + type);\r",
									"            }\r",
									"            break;\r",
									"\r",
									"        case \"live_recharged\":\r",
									"            if (title != \"Viví Recargado\" || description != liveRechargedDescription) {\r",
									"                pm.expect.fail(\"Error in: \" + type);\r",
									"            }\r",
									"            break;\r",
									"\r",
									"        case \"passes\":\r",
									"            if (title != \"Pases\" || description != passesDescription) {\r",
									"                pm.expect.fail(\"Error in: \" + type);\r",
									"            }\r",
									"            break;\r",
									"\r",
									"        case \"plans\":\r",
									"            if (title != \"Planes\" || description != plansDescription) {\r",
									"                pm.expect.fail(\"Error in: \" + type);\r",
									"            }\r",
									"            break;\r",
									"    }\r",
									"}\r",
									"\r",
									"function validatePayMethod() {\r",
									"    let payMethods = [\"credit\", \"invoice\"]\r",
									"    if (market === \"prepago\") {\r",
									"        pm.expect(jsonData.best_deal.pay_method).to.be.eql(payMethods[0]);        \r",
									"    } else {\r",
									"        pm.expect(jsonData.best_deal.pay_method).to.be.oneOf(payMethods);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"function validateCoincidenceOfBestDealBetweenTypes(response) {\r",
									"    if(response.type==jsonData.best_deal.type){\r",
									"        pm.expect(response).to.be.eql(jsonData.best_deal);\r",
									"    }\r",
									"}\r",
									"function channelValidation_Image() {\r",
									"        if (pm.request.headers.get('X-Source-Name') === \"ANDROID\" || pm.request.headers.get('X-Source-Name') === \"IOS\") {\r",
									"\r",
									"            pm.expect(jsonData.best_deal.image.indexOf('app')).to.not.equal(-1);\r",
									"        } else {\r",
									"            pm.expect(jsonData.best_deal.image.indexOf('web')).to.not.equal(-1);\r",
									"        }\r",
									"}\r",
									"\r",
									"function validatePassesOption(){     \r",
									"    jsonData.types.forEach(function(e){   \r",
									"     if(market == \"prepago\"){\r",
									"        pm.expect(e.type).not.to.be.eql(\"passes\");\r",
									"    }else{\r",
									"        if(e.type==\"passes\")\r",
									"        pm.expect(e.type).to.be.eql(\"passes\");\r",
									"    }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-extra/v3/payments/{{line_number}}/extras/types",
							"host": [
								"{{host}}-extra"
							],
							"path": [
								"v3",
								"payments",
								"{{line_number}}",
								"extras",
								"types"
							]
						},
						"description": "This endpoint returns the different types of extras that the user can access."
					},
					"response": []
				},
				{
					"name": "Extra by type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"////////////////////////////////////////////////////////////////////////////////////",
									"",
									"pm.environment.unset(\"ids\");",
									"pm.environment.unset(\"id\");",
									"setTypes();",
									"",
									"////////////////////////////////////////////////////////////////////////////////////",
									"",
									"function setTypes() {",
									"    var types = pm.environment.get(\"types\");",
									"    var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"    if (!types || types.length === 0) {",
									"        if (postloginResponse.logged_line.market === \"prepago\") {",
									"            types = [\"packs\", \"passes\", \"live_recharged\", \"giga_benefits\"];",
									"        } else {",
									"            types = [\"packs\", \"passes\", \"giga_benefits\"];",
									"        }",
									"    }",
									"    var currentType = types.shift();",
									"    pm.environment.set(\"type\", currentType);",
									"    pm.environment.set(\"types\", types);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Stores the value of extra cash obtained in the pre request.\r",
									"var extra_cash = parseInt(pm.environment.get(\"extra_cash\"));\r",
									"\r",
									"var types = pm.environment.get(\"types\");\r",
									"\r",
									"//Run the different types of extras\r",
									"if (types && types.length > 0) {\r",
									"    postman.setNextRequest(\"Extra by type\");\r",
									"} else {\r",
									"    if(pm.environment.get(\"type\") == \"giga_benefits\" && pm.response.json().data.offers.length === 0) {\r",
									"        postman.setNextRequest(\"User Plan 1 nivel\")\r",
									"    }\r",
									"    pm.environment.set(\"types\", null);\r",
									"}\r",
									"\r",
									"//Stores the credit that the user has.\r",
									"var balancesResponse = pm.environment.get(\"balancesResponse\");\r",
									"var availableCredit = balancesResponse.wallet.credit.value;\r",
									"var availablePromotionCredit = balancesResponse.wallet.promotion.value;\r",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"\r",
									"//Stores the types of different extras\r",
									"var market = pm.environment.get(\"market\");\r",
									"var ids = pm.environment.get(\"ids\");\r",
									"\r",
									"//Stores all the offers obtained in the response.\r",
									"var offers = pm.response.json().data.offers;\r",
									"//Stores the whole response in JSON format.\r",
									"var jsonData = pm.response.json().data;\r",
									"//Stores the response in an environment variable.\r",
									"pm.environment.set(\"extraByTypeResponse\", jsonData);\r",
									"\r",
									"//Validate the filter of the different types.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-13010/AC-13036/AC-13037/AC-13039/AC-13040/13041] - Validar filtros por tipo\", function () {\r",
									"    validateFilter();\r",
									"});\r",
									"\r",
									"// Validates that the items are sort from the most expensive to the less expensive and divided by availables and disabled. Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-7648] - Validar el ordenamiento de los items por precio descendiente\", function () {\r",
									"    validateOffersOrder();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-9679] - Validacion de categorías disponibles para usuarios Pospago\", function () {\r",
									"    if (market === \"pospago\" && offers.type === \"packs\") {\r",
									"        jsonData.offers.forEach(e => {\r",
									"            if (e.category != \"roaming\") {\r",
									"                pm.expect.fail(\"Los usuarios Pospago solo pueden tener packs de Roaming disponibles.\");\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"//Validates that the item marked as best deal is available.\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-9677] - Validación de items best deal\", function () {\r",
									"    jsonData.offers.forEach(e => {\r",
									"        if (e.is_available === false && e.is_best_deal !== false) {\r",
									"            pm.expect.fail(\"Un pack deshabilitado no puede ser un best deal.\");\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"//Validates that all the package has fee data\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-9680/AC-13410] - Validar que todos los packs del tipo 'Combo' y 'data' incluyan datos\", function () {\r",
									"    dataCategory();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-9681]/[AC-10170] - Validar la disponibilidad de un pack de acuerdo al tipo de pago\", function () {\r",
									"    statusCategory();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-10127] - Validar que el filtro TODOS exista solo cuando el tipo de extra es pases\", function () {\r",
									"    hasALL();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-10124] - Validar el ordenamiento de los filtros\", function () {\r",
									"    sortFilter();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-10131] - Validar los filtros disponibles\", function () {\r",
									"    filtercheck();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-12998] - Validar que el campo 'price' tenga valor 0 para Beneficios Giga\", function () {\r",
									"    priceCheck();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-14218 - Validar el campo benefits]\", function () {\r",
									"\r",
									"    jsonData.offers.forEach(e => validateBenefits(e))\r",
									"        ;\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"AC-14061/AC-14063 - Validar best deal\", function () {\r",
									"\r",
									"    bestIdValid()\r",
									"});\r",
									"\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-15214] - Validar coincidencia de información de cada extra entre endpoints\", function () {\r",
									"    setExtraIds();\r",
									"});\r",
									"\r",
									"//Skips the tests if there are no offers.\r",
									"(offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-15855] Validar que el campo ID tenga uno de los valores esperados para giga_benefits\", function () {\r",
									"\r",
									"    bestIdValid_gigaBenefits()\r",
									"});\r",
									"\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"ALM-16702 /ALM-16703 ] - Validar que las categorias Roaming y LDI no retornen cuando la linea sea pospago y abono\", function () {\r",
									"   validDontShowRoaming(); \r",
									" });\r",
									"\r",
									"  (!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19536] - Validar array 'offers' para clientes con PBU activo\", function(){\r",
									"     pm.expect(jsonData.offers).to.be.empty;\r",
									" });\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//validates the order of the offers, by availability and price.\r",
									"function validateOffersOrder() {\r",
									"    var availablesOffers = filterByAvailability(true);\r",
									"    var unavailablesOffers = filterByAvailability(false);\r",
									"\r",
									"    offersArray = sort(availablesOffers).concat(sort(unavailablesOffers));\r",
									"\r",
									"    for (var i in jsonData.offers) {\r",
									"        pm.expect(offersArray[i].price.value).to.eql(jsonData.offers[i].price.value, \"Error en el ordenamiento\");\r",
									"    }\r",
									"}\r",
									"\r",
									"//Filters the different offers by availability and returns an array according to the given boolean.\r",
									"function filterByAvailability(bool) {\r",
									"    return offers.filter(function (e) {\r",
									"        return e.is_available === bool;\r",
									"    });\r",
									"}\r",
									"\r",
									"function sort(array) {\r",
									"    return array.sort(function (a, b) {\r",
									"        if (a.price.value < b.price.value) {\r",
									"            return 1;\r",
									"        } if (a.price.value > b.price.value) {\r",
									"            return -1;\r",
									"        } return 0;\r",
									"    });\r",
									"}\r",
									"\r",
									"//check the data \r",
									"function dataCategory() {\r",
									"    for (i = 0; i < offers.length; i++) {\r",
									"        if (offers[i].category === \"combo\" || offers[i].category === \"data\") {\r",
									"            if (offers[i].data.amount === null && offers[i].data.unit === null) {\r",
									"                pm.expect.fail(\"the data amount shouldnt be null\");\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// check the business rules for buy a package with invoice , credit or promotion credit\r",
									"function statusCategory() {\r",
									"    jsonData.offers.forEach(function (e){\r",
									"        if(e.pay_method === \"credit\"){\r",
									"            if ((availableCredit + extra_cash) >= e.price.value) {\r",
									"                pm.expect(e.is_available).to.be.true;\r",
									"            }else {\r",
									"                pm.expect(e.is_available).to.be.false;\r",
									"            }\r",
									"        }else if(e.pay_method === \"invoice\"){\r",
									"            pm.expect(e.is_available).to.be.true;\r",
									"        }else if(e.pay_method === \"promotions_credit\"){\r",
									"            if ((availablePromotionCredit + extra_cash) >= e.price.value) {\r",
									"                pm.expect(e.is_available).to.be.true; \r",
									"            }else{\r",
									"                pm.expect(e.is_available).to.be.false;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"//check if the filter all is available only when we are in passes.\r",
									"function hasALL() {\r",
									"    //This if is for validate, if my type of extra is passes.\r",
									"    if (jsonData.offers[0].type === \"passes\") {\r",
									"        //The first filter always should be Todos\r",
									"        pm.expect(jsonData.categories[0].name).to.eql(\"Todos\");\r",
									"    } else {\r",
									"        for (i = 0; i < jsonData.categories.length; i++) {\r",
									"            //other categories shouldnt have filter Todos\r",
									"            pm.expect(jsonData.categories[i].name).not.to.eql(\"Todos\");\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"//check if the categories are sorted, always in passes the first one is Todos.\r",
									"function sortFilter() {\r",
									"    var array = [];\r",
									"    var array2 = [];\r",
									"    //develop an array with categories only with the names\r",
									"    for (i = 0; i < jsonData.categories.length; i++) {\r",
									"        array.push(jsonData.categories[i].name);\r",
									"    }\r",
									"    //if I am in passes type, I delete the first filter Todos.\r",
									"    if (jsonData.offers[0].type === \"passes\") {\r",
									"        array.splice(0, 1);\r",
									"    }\r",
									"    //make alphabetic the categories\r",
									"    array2 = array.sort();\r",
									"    //compare categories sorted with the original with out \"Todos\", because Todos always should be the first one.\r",
									"    pm.expect(array).to.eql(array2);\r",
									"}\r",
									"\r",
									"//check the relationship between offers and categories\r",
									"function filtercheck() {\r",
									"    var categories = []\r",
									"    jsonData.categories.forEach(function (e) {\r",
									"        categories.push(e.id);\r",
									"    });\r",
									"    for (i = 0; i < jsonData.offers.length; i++) {\r",
									"        if (jsonData.categories.length === 0) {\r",
									"            pm.expect(jsonData.offers[i].category).to.eql(null)\r",
									"        } else {\r",
									"            pm.expect(categories).to.be.an('array').and.include(jsonData.offers[i].category)\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"//Validate the filter of each extra type.\r",
									"function validateFilter() {\r",
									"    for (i = 0; i < jsonData.offers.length; i++) {\r",
									"        pm.expect(pm.environment.get(\"type\")).to.eql(jsonData.offers[i].type)\r",
									"    }\r",
									"}\r",
									"\r",
									"// Validate that price is equal to 0 for giga_benefits\r",
									"function priceCheck() {\r",
									"    if (offers[0].type == \"giga_benefits\") {\r",
									"        pm.expect(offers[0].price.value).to.equal(0, \"It should be 0\");\r",
									"    }\r",
									"}\r",
									"\r",
									"function validateBenefits(offer) {\r",
									"    offer.benefits.forEach(e => {\r",
									"        switch (e.id) {\r",
									"            case \"whatsApp\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"instagram\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"facebook\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"facebook messenger\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"twitter\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"flow\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            case \"snapchat\":\r",
									"                validateUrl(e.id, e.url);\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"El pase de \" + e.id + \", incorrecto\");\r",
									"                break;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function validateUrl(id, url) {\r",
									"    const whatsappUrl =  pm.environment.get(\"resources\") + \"/agestion/images/social/whatsapp.svg\";\r",
									"    const instagramUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/instagram.svg\";\r",
									"    const facebookUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/facebook.svg\";\r",
									"    const facebookMessengerUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/messenger.svg\";\r",
									"    const twitterUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/twitter.svg\";\r",
									"    const snapchatUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/snapchat.svg\";\r",
									"    const flowUrl = pm.environment.get(\"resources\") + \"/agestion/images/social/flow.svg\";\r",
									"\r",
									"\r",
									"    switch (id) {\r",
									"        case \"whatsapp\":\r",
									"                pm.expect(url).to.eql(whatsappUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"\r",
									"        case \"instagram\":\r",
									"                pm.expect(url).to.eql(instagramUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"\r",
									"        case \"facebook\":\r",
									"                pm.expect(url).to.eql(facebookUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"\r",
									"        case \"facebook messenger\":\r",
									"                pm.expect(url).to.eql(facebookMessengerUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"\r",
									"        case \"twitter\":\r",
									"            if (url != twitterUrl) {\r",
									"                pm.expect.fail(\"Error in: \" + id);\r",
									"            }\r",
									"            break;\r",
									"\r",
									"        case \"snapchat\":\r",
									"                pm.expect(url).to.eql(snapchatUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"\r",
									"        case \"flow\":\r",
									"                pm.expect(url).to.eql(flowUrl, \"Error in: \" + id)\r",
									"            break;\r",
									"    }\r",
									"}\r",
									"\r",
									"function bestIdValid() {\r",
									"    businessId = [\"10000700-FAN_PRDA_00205\", \"10000843-FAN_PRDA_00252\", \"10000697-FAN_PRDA_00210\", \"10000734-FAN_PRDA_00178\", \"10000733-FAN_PRDA_00177\", \"10000717-FAN_PRDA_00161\",\"10000588-FAN_PRDA_00123\"];\r",
									"\r",
									"    for (i = 0; i < offers.length; i++) {\r",
									"\r",
									"        var businessId_check = returnSubStringId(i);\r",
									"\r",
									"        if (offers[i].is_best_deal === true) {\r",
									"            pm.expect(businessId_check).to.be.oneOf(businessId);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function returnSubStringId(i) {\r",
									"    var businessId = offers[i].id.substring(0, 23);\r",
									"    return businessId;\r",
									"}\r",
									"\r",
									"//Set the ids of each extra\r",
									"function setExtraIds() {\r",
									"    var ids = pm.environment.get(\"ids\");\r",
									"\r",
									"    if (!ids && offers) {\r",
									"        ids = offers.map(function (e) {\r",
									"            return e.id;\r",
									"        });\r",
									"    }\r",
									"    pm.environment.set(\"ids\", ids);\r",
									"    validateEachExtra(ids)\r",
									"}\r",
									"\r",
									"//Call the extra detail endpoint for each extra\r",
									"function validateEachExtra(ids) {\r",
									"    if (ids && ids.length > 0) {\r",
									"        postman.setNextRequest(\"Extra by id\");\r",
									"    } else {\r",
									"        pm.environment.set(\"ids\", null);\r",
									"    }\r",
									"}\r",
									"\r",
									"function bestIdValid_gigaBenefits(){\r",
									"    let GigaBenefitsID = [\"10000720\",\"10000857\"];\r",
									"    if (offers[0].type == \"giga_benefits\") {\r",
									"        pm.expect(offers[0].id.substring(0,8)).to.be.oneOf(GigaBenefitsID);\r",
									"    }\r",
									"}\r",
									"\r",
									"function validDontShowRoaming(){ \r",
									"     jsonData.categories.forEach(function(e){     \r",
									"                pm.expect(e.name).not.to.be.eql(\"Larga Distancia Internacional\");  \r",
									"                pm.expect(e.name).not.to.be.eql(\"Roaming Internacional\"); \r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-extra/v3/payments/{{line_number}}/extras?type={{type}}",
							"host": [
								"{{host}}-extra"
							],
							"path": [
								"v3",
								"payments",
								"{{line_number}}",
								"extras"
							],
							"query": [
								{
									"key": "type",
									"value": "{{type}}"
								}
							]
						},
						"description": "This endpoint returns all the possible offers of the user filtered by type PACK"
					},
					"response": []
				},
				{
					"name": "Extra by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"extra_id\");",
									"setIds();",
									"//Set the different extra id",
									"function setIds(){",
									"    var ids = pm.environment.get(\"ids\");",
									"    var currentId = ids.shift();",
									"    pm.environment.set(\"extra_id\",currentId);",
									"    pm.environment.set(\"ids\",ids);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"var extraByTypeResponse = pm.environment.get(\"extraByTypeResponse\");\r",
									"var currentType = pm.environment.get(\"type\");\r",
									"var currentId = pm.environment.get(\"extra_id\")\r",
									"var ids = pm.environment.get(\"ids\");\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"if (ids && ids.length > 0) {\r",
									"    postman.setNextRequest(\"Extra by id\");\r",
									"} else {\r",
									"    pm.environment.set(\"ids\", null);\r",
									"    (currentType == \"giga_benefits\") ? postman.setNextRequest() : postman.setNextRequest(\"Extra by type\");\r",
									"}\r",
									"\r",
									"//Tests\r",
									"(extraByTypeResponse.offers.length < 1 ? pm.test.skip : pm.test)(\"[AC-15214] - Validar coincidencia de información con endpoint Extra by Type\", function () {\r",
									"    if(extraByTypeResponse !== undefined){\r",
									"        compareResponses();\r",
									"    }else{\r",
									"        pm.expect.fail(\"No se pudo obtener la response de la API de Extra by type.\")\r",
									"    }\r",
									"});\r",
									"\r",
									"//Validate that terms and conditions of each type aren't null\r",
									"pm.test(\"[AC-6716] - Validar que los terminos y condiciones no devuelvan vacio\", function () {\r",
									"    terms();\r",
									"});\r",
									"\r",
									"//Functions\r",
									"//Check the coincidence between the response of extra by type for this extra, and the detail of the extra.\r",
									"function compareResponses() {\r",
									"    const idExtra = extraByTypeResponse.offers.find( e => \r",
									"        e.id === pm.environment.get(\"extra_id\")\r",
									"    );\r",
									"    pm.expect(jsonData).to.be.eql(idExtra);\r",
									"}\r",
									"\r",
									"//Validate terms and conditions.\r",
									"function terms() {\r",
									"    var arrayTerms = [];\r",
									"    var terms = pm.variables.get(\"host\") + \"-term/v1/terms/\" + currentType + \"/\" + currentId\r",
									"    pm.sendRequest({\r",
									"        url: terms,\r",
									"        header: {\r",
									"            \"X-Source-Name\": \"Android\",\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    }, function (err, response) {\r",
									"        var termsAndConditions = response.json().terms_and_conditions;\r",
									"        pm.expect(termsAndConditions).to.not.equal(\"\", \"It shouldn't be empty\");\r",
									"        pm.expect(termsAndConditions).to.not.equal(\"Legales\", \"Wrong TyC\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-extra/v3/payments/{{line_number}}/extras/{{extra_id}}",
							"host": [
								"{{host}}-extra"
							],
							"path": [
								"v3",
								"payments",
								"{{line_number}}",
								"extras",
								"{{extra_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "User Plan",
			"item": [
				{
					"name": "User Plan 1 nivel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceProblem = pm.environment.get(\"dxp\") + \"/ServiceProblemManagement/v1/serviceProblem/\" + pm.variables.get(\"line_number\") + \"?fields=status\"\r",
									"\r",
									"getServiceProblem(serviceProblem);\r",
									"\r",
									"function getServiceProblem(request){\r",
									"    pm.sendRequest({\r",
									"        url: request,\r",
									"        //Configurates the header of the request with the JWT.\r",
									"        header: {\r",
									"            \"Authorization\": 'Bearer ' + pm.globals.get(\"authToken\")\r",
									"        },\r",
									"    },  function (err, response) {\r",
									"        var responseJson;\r",
									"        if(response.code == 200){\r",
									"            responseJson = response.json();\r",
									"            pm.variables.set(\"serviceProblemCode\", response.code);\r",
									"            pm.variables.set(\"serviceProblemResponse\", responseJson);\r",
									"        }else{\r",
									"            pm.variables.set(\"serviceProblemCode\", response.code);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declaración de variables\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"//Stores the first level of plan details response in an environment variable.\r",
									"pm.environment.set(\"userPlanFirstLevelApp\", jsonData);\r",
									"\r",
									"//Stores the roaming information\r",
									"var serviceProblemResponse = pm.variables.get(\"serviceProblemResponse\");\r",
									"\r",
									"//Stores the postlogin information of the user.\r",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"var market = pm.environment.get(\"market\");\r",
									"var availablesResponse = pm.environment.get(\"availablesResponse\");\r",
									"\r",
									"//Stores flow benefit in two variables (one for user plan and another for availables)\r",
									"var flowBenefit = jsonData.benefits.filter(function (e){return e.id == \"700\"});\r",
									"var flowAvailables = availablesResponse.internet_details.filter(function (e){return e.id == \"700\"});\r",
									"\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"//Validate the coincidence of plan price between endpoints.\r",
									"pm.test(\"[AC-13824] - [Validar coincidencia del valor de plan con servicio postlogin]\", function () {\r",
									"    pm.expect(jsonData.summary.cost.value).to.eql(postloginResponse.logged_line.plan.basic_price.value, \"No coincide valor del plan entre postlogin y detalle plan.\");\r",
									"});\r",
									"\r",
									"//Validate that daily internet flag is false for abono and pospago users.\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"[AC-15909/AC-15910] - [Validar flag de daily_internet para usuario abono y pospago]\", function () {\r",
									"    pm.expect(jsonData.daily_internet.active).to.be.false;\r",
									"});\r",
									"\r",
									"//Validate that 'excedentes' items are not included in 'items' section.\r",
									"(market == \"prepago\" ? pm.test.skip : pm.test)(\"[AC-15915] - [Validar que no existan items excedentes]\", function () {\r",
									"    for (i = 0; i < jsonData.summary.items.length; i++) {\r",
									"        pm.expect(jsonData.summary.items[i].title.toLowerCase()).to.not.include(\"excedente\")\r",
									"        pm.expect(jsonData.summary.items[i].title.toLowerCase()).to.not.include(\"excedentes\")\r",
									"    }\r",
									"});\r",
									"\r",
									"//Validate that 'pass' section has not whatsapp codes.\r",
									"pm.test(\"[AC-16558] - [Validar que no existan códigos de Whatsapp dentro de la sección 'Pass']\", function () {\r",
									"    pm.expect(jsonData.pass).to.not.include(\"710\");\r",
									"    pm.expect(jsonData.pass).to.not.include(\"711\");\r",
									"});\r",
									"\r",
									"//Validate that 'items' array on packs section is empty.\r",
									"pm.test(\"[] - [Validar array vacio en sección items de packs]\",function(){\r",
									"    for(i=0;i<jsonData.packs.length;i++){\r",
									"        pm.expect(jsonData.packs[i].items).to.be.empty;\r",
									"    }\r",
									"});\r",
									"\r",
									"(!jsonData.summary.ldi ? pm.test.skip : pm.test)(\"[ALM-13260/ALM-13261] - [Validar 'status_type' de LDI para los diferentes tipos de estados]\", function(){\r",
									"    validateStatusType(jsonData.summary.ldi.status, jsonData.summary.ldi.status_type);\r",
									"});\r",
									"\r",
									"(!jsonData.summary.roaming ? pm.test.skip : pm.test)(\"[ALM-2412/ALM-2413/ALM-2414/ALM-2384] - [Validar 'status_type' de Roaming para los diferentes tipos de estados]\", function(){\r",
									"    validateStatusType(jsonData.summary.roaming.status, jsonData.summary.roaming.status_type);\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-11992/ALM-11993] - [Validar status de LDI]\", function(){\r",
									"    if(pm.variables.get(\"serviceProblemCode\") == 200){\r",
									"        pm.expect(jsonData.summary.ldi.status).to.eql(\"Activo LDI\");\r",
									"    }else{\r",
									"        pm.expect(jsonData.summary.ldi.status).to.eql(\"Sin información\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-11989/ALM-11990/ALM-11992/ALM-11994] - Validar estados de Roaming de acuerdo al correlationID de ServiceProblem\", function(){\r",
									"    serviceProblemComparison();\r",
									"});\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Validate Status type of Roaming and LDI for different status.\r",
									"function validateStatusType(status, statusType){\r",
									"    switch(status){\r",
									"        case \"Activo LDI\":\r",
									"        case \"Activo Roaming FULL\":\r",
									"        pm.expect(statusType).to.eql(\"100\");\r",
									"        break;\r",
									"        case \"Activo Restringido\":\r",
									"        case \"Activo Roaming RESTRINGIDO\":\r",
									"        pm.expect(statusType).to.eql(\"101\");\r",
									"        break;\r",
									"        case \"Inactivo\":\r",
									"        pm.expect(statusType).to.eql(\"000\");\r",
									"        break;\r",
									"        case \"Sin información\":\r",
									"        pm.expect(statusType).to.eql(\"999\");\r",
									"        break;\r",
									"        default:\r",
									"        pm.expect.fail(\"No existe código disponible.\")\r",
									"    }\r",
									"}\r",
									"\r",
									"function serviceProblemComparison(){\r",
									"    if(pm.variables.get(\"serviceProblemCode\") == 200){\r",
									"        switch(serviceProblemResponse.correlationId){\r",
									"            case null:\r",
									"            pm.expect(jsonData.summary.roaming.status).to.eql(\"Activo Roaming RESTRINGIDO\");\r",
									"            break;\r",
									"            case \"C_SUB_DDISRI_SERV\":\r",
									"            pm.expect(jsonData.summary.roaming.status).to.eql(\"Inactivo\");\r",
									"            break;\r",
									"            case \"C_SUB_DDICRI_SERV\":\r",
									"            pm.expect(jsonData.summary.roaming.status).to.eql(\"Activo Roaming FULL\");\r",
									"            break;\r",
									"            default:\r",
									"            pm.expect.fail(\"Estado de roaming no es válido\");\r",
									"            break;\r",
									"        }\r",
									"    }else{\r",
									"        pm.expect(jsonData.summary.roaming.status).to.eql(\"Sin información\");\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-plan/v4/plans/{{line_number}}/current",
							"host": [
								"{{host}}-plan"
							],
							"path": [
								"v4",
								"plans",
								"{{line_number}}",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Plan 2 nivel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declaración de variables\r",
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"//Stores the roaming information of the user.(not included in R0.1)\r",
									"//var roamingResponse = pm.environment.get(\"roamingResponse\");\r",
									"\r",
									"//Stores the market information of the user.\r",
									"var market = pm.environment.get(\"market\");\r",
									"\r",
									"//Stores the response of the first level of plan details.\r",
									"var userPlanFirstLevelApp = pm.environment.get(\"userPlanFirstLevelApp\");\r",
									"\r",
									"//Stores the filtered array of internet details.\r",
									"var internetDetails = jsonData.details.find(function (e){\r",
									"    return e.section_id == \"600\"\r",
									"});\r",
									"////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[AC-15907] - [Validar coincidencia de nombre en ambos niveles]\", function () {\r",
									"    pm.expect(userPlanFirstLevelApp.summary.name).to.eql(jsonData.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-15908] - [Validar coincidencia de costo del plan en ambos niveles]\", function () {\r",
									"    pm.expect(userPlanFirstLevelApp.summary.cost).to.eql(jsonData.cost);\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-15921] - [Validar orden de las cards]\", function () {\r",
									"    cardsOrder();\r",
									"});\r",
									"/*\r",
									"pm.test(\"[AC-16001] - [Validar coincidencia de roaming en ambos niveles]\", function () {\r",
									"    pm.expect(userPlanFirstLevelApp.summary.roaming).to.eql(jsonData.roaming);\r",
									"});\r",
									"*/\r",
									"(market != \"prepago\" ?  pm.test.skip : internetDetails == undefined ? pm.test.skip : pm.test)(\"[AC-16568] - [Validar ordenamiento de los valores de internet por día]\", function () {\r",
									"    orderDailyInternetPrices();\r",
									"});\r",
									"\r",
									"(market != \"prepago\" ?  pm.test.skip : internetDetails == undefined ? pm.test.skip : pm.test)(\"[AC-16556] - [Validar 'value' de internet por día en sección 'items' para usuario prepago\", function () {\r",
									"   dailyInternetCoincidence();\r",
									"});\r",
									"\r",
									"pm.test(\"[AC-17600] - [Validar coincidencia de LDI en ambos niveles]\", function () {\r",
									"    pm.expect(userPlanFirstLevelApp.summary.ldi).to.eql(jsonData.ldi);\r",
									"});\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"//Order the cards on the predefined order.\r",
									"function cardsOrder() {\r",
									"    var items = [];\r",
									"    for (i = 0; i < jsonData.details.length; i++) {\r",
									"        items.push(jsonData.details[i].section_title);\r",
									"    }\r",
									"    var itemsOrdered = [];\r",
									"    var theOrder = [\"Internet\", \"Llamadas\", \"Mensajes\", \"Roaming\", \"LDI\"];\r",
									"\r",
									"    for (i = 0; i < theOrder.length; i++) {\r",
									"        if (items.indexOf(theOrder[i]) > -1) {\r",
									"            itemsOrdered.push(theOrder[i]);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"//Check if the daily internet prices are ordered in ascendant way.\r",
									"function orderDailyInternetPrices(){\r",
									"    for(i=0;i<internetDetails.items.length-1;i++){\r",
									"        pm.expect(getPrice(internetDetails.items[i].value)).to.be.below(getPrice(internetDetails.items[i+1].value));\r",
									"    }\r",
									"}\r",
									"//Converts the string to numeric.\r",
									"function getPrice(price){\r",
									"    var string = price; \r",
									"    var priceString = string.replace(\"$\", \"\");\r",
									"    var priceString2 = priceString.replace(\",\", \".\");\r",
									"    var final = parseFloat(priceString2);\r",
									"    return final;\r",
									"}\r",
									"\r",
									"//Check the coincidence of prices between 1st and 2nd level of plan details.\r",
									"function dailyInternetCoincidence(){\r",
									"    var internetFirstLevel = userPlanFirstLevelApp.summary.items.filter(function (e){\r",
									"        return e.title === internetDetails.items[0].title\r",
									"    });\r",
									"    pm.expect(getPrice(internetFirstLevel[0].value)).to.eql(getPrice(internetDetails.items[0].value));\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-plan/v4/plans/{{line_number}}/current/details",
							"host": [
								"{{host}}-plan"
							],
							"path": [
								"v4",
								"plans",
								"{{line_number}}",
								"current",
								"details"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Avatar",
			"item": [
				{
					"name": "Avatar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let arrayServices = []\r",
									"let arrayIds = []\r",
									"setTypesAndIds();\r",
									"\r",
									"function setTypesAndIds(){\r",
									"    var serviceTypes = pm.environment.get(\"serviceTypes\");\r",
									"    var serviceIds = pm.environment.get(\"serviceIds\");\r",
									"    let postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"    if ((!serviceTypes || serviceTypes.length === 0) && (!serviceIds || serviceIds.length === 0)) {\r",
									"        arrayServices.push(postloginResponse.logged_line.type);\r",
									"        arrayIds.push(postloginResponse.logged_line.service_id);\r",
									"        postloginResponse.services.forEach(function (e){\r",
									"            arrayServices.push(e.type)\r",
									"            arrayIds.push(e.service_id)\r",
									"        });\r",
									"        serviceTypes = arrayServices;\r",
									"        serviceIds = arrayIds;\r",
									"    }\r",
									"    var currentType = serviceTypes.shift();\r",
									"    var currentId = serviceIds.shift();\r",
									"    pm.environment.set(\"service_type\", currentType);\r",
									"    pm.environment.set(\"serviceTypes\", serviceTypes);\r",
									"    pm.environment.set(\"service_id\", currentId);\r",
									"    pm.environment.set(\"serviceIds\", serviceIds);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().data;\r",
									"\r",
									"let types = [\"default\", \"mobile\", \"home\"];\r",
									"let serviceTypes = pm.environment.get(\"serviceTypes\");\r",
									"\r",
									"if (serviceTypes && serviceTypes.length > 0) {\r",
									"    postman.setNextRequest(\"Avatar\");\r",
									"}else{\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"///////////////////////////////////////////////////////////////////\r",
									"pm.test(\"[ALM-13148] - Validar cantidad de Avatars devueltos en la respuesta\", function(){\r",
									"    pm.expect(jsonData.length).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-13153] - Validar tipo de avatars\", function(){\r",
									"    jsonData.forEach(function (e){\r",
									"        pm.expect(e.type).to.be.oneOf(types)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-13210] - Validar que el primer avatar tenga campo 'selected'\", function(){\r",
									"    pm.expect(jsonData[0]).to.have.property(\"selected\");\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-13300] - Validar valor del campo 'selected\", function(){\r",
									"    pm.expect(jsonData[0].selected).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-13165] - Validar coincidencia entre campo 'type' y parámetro 'service_type'\", function(){\r",
									"    pm.variables.get(\"service_type\")\r",
									"});\r",
									"\r",
									"pm.test(\"[ALM-13308] - Validar que los avatars NO seleccionados no tengan campo 'selected'\", function(){\r",
									"    let firstElement = jsonData.shift();\r",
									"    jsonData.forEach(function (e){\r",
									"        pm.expect(e).to.not.have.property(\"selected\");\r",
									"    });\r",
									"    jsonData.unshift(firstElement)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-avatar/v1/avatars/{{service_type}}/{{service_id}}",
							"host": [
								"{{host}}-avatar"
							],
							"path": [
								"v1",
								"avatars",
								"{{service_type}}",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Avatar List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-avatar/v1/avatars",
							"host": [
								"{{host}}-avatar"
							],
							"path": [
								"v1",
								"avatars"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().data;",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"",
									"pm.test(\"[AC-9404] - [Validar que el avatar actual coincida con el avatar mostrado en el servicio de Postlogin)]\",function(){",
									"    //validateAvatar();",
									"});",
									"",
									"function validateAvatar(){",
									"    //Valida que el avatar id del usuario mostrado en el Postlogin coincida con el devuelto en el servicio.",
									"    pm.expect(postloginResponse.logged_line.avatar_id).to.equal(jsonData.avatar.id, \"No coinciden los IDs\");",
									"    //Valida que el avatar URL del usuario mostrado en el Postlogin coincida con el devuelto en el servicio.",
									"    pm.expect(postloginResponse.logged_line.avatar).to.equal(jsonData.avatar.url, \"No coincide la URL\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-avatar/v1/user/{{line_number}}",
							"host": [
								"{{host}}-avatar"
							],
							"path": [
								"v1",
								"user",
								"{{line_number}}"
							]
						}
					},
					"response": [
						{
							"name": "User Avatar",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/avatars/2932447846",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"avatars",
										"2932447846"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Global-Transaction-ID",
									"value": "sV0C0-oCbIc"
								},
								{
									"key": "X-Generator",
									"value": "teco-bff_0.2.17-SNAPSHOT"
								},
								{
									"key": "vary",
									"value": "accept-encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 13 Mar 2020 13:01:16 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"05\",\n    \"url\": \"https://ac-mitecoswitch-server-files-mitecoswitch-bff-dev.apps-rp.cloudteco.com.ar/__files/resources/avatars/01.png\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Upselling",
			"item": [
				{
					"name": "Upselling - Listado de planes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"plan_code\", pm.environment.get(\"postloginResponse\").logged_line.plan.plan_code);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json().data;",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"var market = pm.environment.get(\"market\");",
									"pm.environment.set(\"upsellingListado\", jsonData);",
									"pm.environment.set(\"plansToUpselling\", jsonData.map(e=>e.plan_code));",
									"//////////////////////////////////////////////////////////////////////////////",
									"//Obtain the diferents plan_code for make an upselling",
									"var plansUpselling = jsonData.map(e => e.plan_code  );",
									"pm.environment.set(\"plansUpselling\", plansUpselling);",
									"/////////////////////////////////////////////////////////////////////////////",
									"//Validation that the user has only one \"current plan\" and validation of the name of the current plan.",
									"pm.test(\"[AC-7966] - Validar el nombre del plan de origen\", function() {",
									"    var currentPlan = jsonData.find(function(e){",
									"        return e.is_current === true; ",
									"    });",
									"    validatePlanName(currentPlan);",
									"});",
									"pm.test(\"[AC-9530] - Validar que el usuario posea un único plan con el flag is_current en true\", function() {",
									"    var currentPlan = jsonData.filter(function(e){",
									"        return e.is_current === true; ",
									"    });",
									"    pm.expect(currentPlan.length).to.equal(1,\"A user can't have more than one current plan\");",
									"});",
									"//Validates that the list are correctly sorted (by price of first step ascending)",
									"pm.test(\"[AC-8317] - Validar el ordenamiento de los items devueltos por el servicio de Listado de planes\", function() {",
									"    validateSort();",
									"});",
									"//Validates that the cost with discount is minor than cost when \"has_discount\" flag is true and equal when \"has_discount\" flag is false.",
									"pm.test(\"[AC-9532] - Validación de costos y descuentos\",function(){",
									"    validateDiscount()",
									"});",
									"//Validate that cost description is equal to the cost in cost_steps.",
									"(!jsonData.cost_steps ? pm.test.skip : pm.test)(\"[AC-9533] - Validación de costo del plan y costo del plan en escalones\", function(){",
									"    validateCostCoincidence();",
									"});",
									"//Validate coincidence between title and code of each item on features section.",
									"pm.test(\"[ALM-9734] - Validar coincidencia de código con titulo en sección features\", function(){",
									"    validateCodes();",
									"});",
									"//Validate the order of the items on features section.",
									"pm.test(\"[ALM-9735] - Validar ordenamiento de items en sección features\", function(){",
									"    validateFeaturesSort();",
									"});",
									"pm.test(\"[AC-9531/] - Validar nombres de los planes destino\",function(){",
									"    jsonData.forEach(function (item){",
									"        validatePlanName(item);",
									"    });",
									"});",
									"pm.test(\"[ALM-9849] / [ALM-9825] / [ALM-9848] - Validar que el codigo del plan del cliente se muestre solo 1 vez en el listado\",function(){",
									"    validateCodeOriginOnce();",
									"})",
									"",
									"pm.test(\"[ALM-20196] - Validar coincidencia de costo del plan actual con la API de Postlogin\", function(){",
										"    var currentPlan = jsonData.find(function(e){",
										"        return e.is_current === true; ",
										"    });",
										"    pm.expect(currentPlan.cost.cost.value).to.equal(parseFloat(postloginResponse.logged_line.plan.basic_price.value.toFixed()));",
										"})",
										"",
									"//Functions",
									"function validateCurrentPlanTitle(currentPlan) {",
									"        switch(market){",
									"        case \"abono\":",
									"            pm.expect(currentPlan.title).to.equal(\"Plan \" + getDataIncluded(currentPlan) + \" GB\");",
									"            break;",
									"        case \"prepago\":",
									"            pm.expect(currentPlan.title).to.equal(\"Prepago\");",
									"            pm.expect(currentPlan.id).to.equal(postloginResponse.logged_line.plan.id);",
									"            break;",
									"        case \"pospago\":",
									"            if(currentPlan.is_black) {",
									"                pm.expect(currentPlan.title).to.equal(\"Plan Black \" + getDataIncluded(currentPlan) + \" GB\");",
									"            }else{",
									"                pm.expect(currentPlan.title).to.equal(\"Plan \" + getDataIncluded(currentPlan) + \" GB\");",
									"            }",
									"            break;",
									"    }",
									"    //Compares the values of the current from postlogin and the current from this endpoint.",
									"}",
									"function validatePlanName(plan){",
									"    if(plan.is_current){",
									"        validateCurrentPlanTitle(plan);",
									"    }else{",
									"        if(plan.is_black){",
									"            validateBlack(plan)",
									"        }else{",
									"            pm.expect(plan.title).to.equal(\"Plan \" + getDataIncluded(plan) + \" GB\");",
									"        }",
									"    }",
									"}",
									"function validateBlack(item) {",
									"    if(!item.title.includes(\"Black\")) {",
									"        pm.expect.fail(\"The plan is black, it must contain the world black in the title of the plan.\");",
									"        }",
									"        if(item.title.includes(\"Black\")) {",
									"            pm.expect(item.is_black).to.equal(true);",
									"        }",
									"}",
									"function validateSort() {",
									"    var prices = jsonData.filter( function(e) {",
									"            return e.cost_steps;",
									"    });",
									"    for(i=0; i<prices.length; i++) {",
									"        if(i+1 == prices.length) {",
									"            break;",
									"        }",
									"        var priceList1 = prices[i].cost_steps[0].cost_with_discount.value;",
									"        var priceList2 = prices[i+1].cost_steps[0].cost_with_discount.value;",
									"        pm.expect(priceList1).to.be.at.most(priceList2);",
									"        }",
									"}",
									"//Converts the price from a string to a number to validate the sort.",
									"function getPrice(price){",
									"    var split = price.split(\" \");",
									"    var priceString = split[0].replace(\"$\", \"\");",
									"    var priceString2 = priceString.replace(\".\",\"\");",
									"    var final = parseFloat(priceString2);",
									"    return final;",
									"}",
									"function getDataIncluded(currentPlan) {",
									"    if(currentPlan.features.length>0){",
									"    var internet = currentPlan.features.find(function(e){",
									"        return e.title == \"Internet\";",
									"    });",
									"        if(internet){",
									"            var gb = internet.description.split(\" \");",
									"            return gb[0];",
									"        }else{",
									"            pm.expect.fail(\"Debe venir dentro de sección 'features' un item de Internet\");",
									"        }",
									"    }",
									"}",
									"function validateDiscount(){",
									"    var planWithSteps = jsonData.filter(function(e){",
									"        return e.cost_steps;",
									"    });",
									"    for(i=0; i<planWithSteps.length;i++){",
									"        for(j=0;j<planWithSteps[i].cost_steps.length;j++){",
									"            var price = planWithSteps[i].cost_steps[j].cost.value;",
									"            var priceWithDiscount = planWithSteps[i].cost_steps[j].cost_with_discount.value;",
									"            if(planWithSteps[i].cost_steps[j].has_discount === true){",
									"                pm.expect(priceWithDiscount).to.at.most(price);   ",
									"            }else{",
									"                pm.expect(priceWithDiscount).to.be.equal(price);",
									"            }",
									"        }",
									"    }",
									"}",
									"function validateCostCoincidence(){",
									"    var planWithSteps = jsonData.find(function(e){",
									"        return e.cost_steps;",
									"    });",
									"    for(i=0; i<planWithSteps.length;i++){",
									"        for(j=0;j<planWithSteps[i].cost_steps.length;j++){",
									"                pm.expect(getPrice(planWithSteps[i].cost.description)).to.be.equal(planWithSteps[i].cost_steps[j].cost.value);",
									"        }",
									"    }",
									"}",
									"function validateCodes(){",
									"    jsonData.forEach(function (e){",
									"        e.features.forEach(function(feature){",
									"            switch(feature.type){",
									"                case 300:",
									"                if(market == \"prepago\"){",
									"                    pm.expect(feature.title).to.include(\"SMS\");",
									"                }else{",
									"                    pm.expect(feature.title).to.eql(\"SMS\");",
									"                }",
									"                break;",
									"                case 310:",
									"                pm.expect(feature.title).to.eql(\"MMS\");",
									"                break;",
									"                case 400:",
									"                pm.expect(feature.title).to.include(\"excedente\")",
									"                break;",
									"                case 401:",
									"                pm.expect(feature.title).to.eql(\"Llamadas a Personal\");",
									"                break;",
									"                case 402:",
									"                pm.expect(feature.title).to.eql(\"Llamadas a otras Compañías\");",
									"                break;",
									"                case 600:",
									"                if(market == \"prepago\"){",
									"                    pm.expect(feature.title).to.include(\"Internet\");",
									"                }else{",
									"                    pm.expect(feature.title).to.eql(\"Internet\");",
									"                }",
									"                break;",
									"                case 601:",
									"                pm.expect(feature.title).to.include(\"Datos en\");",
									"                break;",
									"                case 700:",
									"                pm.expect(feature.title).to.eql(\"Flow\");",
									"                break;",
									"                case 710:",
									"                pm.expect(feature.title).to.eql(\"WhatsApp Gratis\");",
									"                break;",
									"                case 711:",
									"                pm.expect(feature.title).to.eql(\"Whatsapp en Roaming\");",
									"                break;",
									"                default:",
									"                pm.expect.fail(\"Escenario no contemplado\");",
									"                break;",
									"            }",
									"        });",
									"    });",
									"}",
									"function validateFeaturesSort(){",
									"    let items = [];",
									"    jsonData.forEach(function (j){",
									"        j.features.forEach(function (e){",
									"        items.push(e.type);",
									"        })",
									"        var itemsOrdered = [];",
									"    let theOrder = [600, 710, 700, 400, 401 ,402, 300, 310, 601, 711];",
									"    for (i = 0; i < theOrder.length; i++) {",
									"        if (items.indexOf(theOrder[i]) > -1) {",
									"            itemsOrdered.push(theOrder[i]);",
									"        }",
									"    }",
									"    pm.expect(Array.from(new Set(items))).to.eql(itemsOrdered);",
									"    items = []",
									"    });",
									"}",
									"",
									"",
									"function validateCodeOriginOnce(){",
									"    var plansListCode = pm.environment.get(\"plansToUpselling\");",
									"    ",
									"    for ( let item of plansListCode){",
									"        const filteredItem = plansListCode.filter(plan => plan === item);",
									"        pm.expect(filteredItem.length).to.be.at.most(1);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"plan_code\", pm.environment.get(\"postloginResponse\").logged_line.plan.plan_code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-upselling/v1/upselling/{{line_number}}/{{plan_code}}/to",
							"host": [
								"{{host}}-upselling"
							],
							"path": [
								"v1",
								"upselling",
								"{{line_number}}",
								"{{plan_code}}",
								"to"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upselling - Detalle del plan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"plan_code\");",
									"setPlan();",
									"",
									"function setPlan(){",
									"    var plansToUpselling = pm.environment.get(\"plansToUpselling\");",
									"    var plan = plansToUpselling.shift();",
									"    pm.environment.set(\"plan_code\",plan);",
									"    pm.environment.set(\"plansToUpselling\",plansToUpselling);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json().data;",
									"var postloginResponse = pm.environment.get(\"postloginResponse\");",
									"var upsellingListado = pm.environment.get(\"upsellingListado\");",
									"var plansToUpselling = pm.environment.get(\"plansToUpselling\");",
									"",
									"",
									"var planInfo = postloginResponse.logged_line.plan;",
									"var market = pm.environment.get(\"market\");",
									"",
									"//Validation of the different plan names",
									"pm.test(\"[AC-8340] - Validar el nombre del plan visualizado en detalle\", function() {",
									"    validatePlanName();",
									"});",
									"",
									"//Validates that if the flag is in true the name of the plan contains the word \"Black\".",
									"pm.test(\"[AC-9535] - Validation for black plans\", function() {",
									"    validateBlack();",
									"});",
									"",
									"//Validate that cost description is equal to the cost in cost_steps.",
									"pm.test(\"[AC-9537] - Validación de costo del plan y costo del plan en escalones\", function(){",
									"    validateCostCoincidence();",
									"});",
									"",
									"//Validates that the cost with discount is minor than cost when \"has_discount\" flag is true and equal when \"has_discount\" flag is false.",
									"pm.test(\"[AC-9534] - Validación de costos y descuentos\",function(){",
									"    validateDiscount();",
									"});",
									"",
									"//Validates that the list are correctly sorted (by price ascending)",
									"pm.test(\"[AC-8342] - Validar que los precios escalonados estén ordenados de forma ascendente.\", function() {",
									"    validateSort();",
									"});",
									"",
									"//Validate that the flag 'is_black' matches between  endpoints (list of plans and plan detail) ",
									"pm.test(\"[AC-8341] - Validar coincidencia de flag 'is_black' entre endpoints\", function(){",
									"    validateFlagIsBlack();",
									"});",
									"",
									"//Validate coincidence between title and code of each item on features section.",
									"pm.test(\"[ALM-9738] - Validar coincidencia de código con titulo en sección features\", function(){",
									"    validateCodes();",
									"});",
									"",
									"//Validate the order of the items on features section.",
									"pm.test(\"[ALM-9739] - Validar ordenamiento de items en sección features\", function(){",
									"    validateFeaturesSort();",
									"});",
									"",
									"//Functions",
									"//Validate different plan names.",
									"function validatePlanName() {",
									"    if(jsonData.is_black){",
									"        pm.expect(jsonData.title).to.equal(\"Plan Black \" + getDataIncluded(jsonData) + \" GB\");",
									"    }else{",
									"        if(market == \"abono\"){",
									"            pm.expect(jsonData.title).to.equal(\"Plan \" + getDataIncluded(jsonData) + \" GB\");",
									"        }else{",
									"            pm.expect(jsonData.title).to.equal(\"Prepago\");",
									"        }",
									"    }",
									"    }",
									"",
									"//Validation for black plans.",
									"function validateBlack() {",
									"        if(jsonData.title.includes(\"Black\")) {",
									"            pm.expect(jsonData.is_black).to.equal(true);",
									"        }",
									"}",
									"//Converts the price from a string to a number to validate the sort.",
									"function getPrice(price){",
									"    var string = price; ",
									"    var split = price.split(\" \");",
									"    var priceString = split[0].replace(\"$\", \"\");",
									"    var priceString2 = priceString.replace(\".\",\"\");",
									"    var final = parseFloat(priceString2);",
									"    return final;",
									"}",
									"function getDataIncluded(currentPlan) {",
									"",
									"    let internetDescription = currentPlan.features.find(e => e.title==\"Internet\");",
									"    ",
									"    var description = internetDescription.description;",
									"    var gb = description.split(\" \");",
									"    ",
									"    return gb[0];",
									"}",
									"function validateCostCoincidence(){",
									"    ",
									"    if(jsonData.cost_steps){",
									"        for(i=0;i<jsonData.cost_steps.length;i++){",
									"                //pm.expect(getPrice(jsonData.cost.description)).to.be.equal(getPrice(jsonData.cost_steps[i].cost.formatted))",
									"                pm.expect(getPrice(jsonData.cost.description)).to.be.equal(getPrice(jsonData.cost_steps[i].cost.formatted))",
									"            ",
									"        }",
									"    }",
									"}",
									"function validateDiscount(){",
									"    ",
									"    if(jsonData.cost_steps && market != \"prepago\"){",
									"        for(i=0;i<jsonData.cost_steps.length;i++){",
									"            var price = getPrice(jsonData.cost_steps[i].cost.formatted);",
									"            var priceWithDiscount = getPrice(jsonData.cost_steps[i].cost_with_discount.formatted);",
									"                ",
									"            if(jsonData.cost_steps[i].has_discount === true){",
									"                pm.expect(priceWithDiscount).to.be.below(price)    ",
									"            }else{",
									"                pm.expect(priceWithDiscount).to.be.equal(price)",
									"            }",
									"        }",
									"        ",
									"    }",
									"      ",
									"}",
									"function validateSort() {",
									"    if(jsonData.cost_steps){",
									"        for(i=0; i<jsonData.cost_steps.length; i++) {",
									"            if(i+1 == jsonData.cost_steps.length) {",
									"                break;",
									"            }",
									"            var priceList1 = getPrice(jsonData.cost_steps[0].cost_with_discount.formatted);",
									"            var priceList2 = getPrice(jsonData.cost_steps[1].cost_with_discount.formatted);",
									"            pm.expect(priceList1).to.be.at.most(priceList2);",
									"        }",
									"    }",
									"}",
									"function validateFlagIsBlack(){",
									"    upsellingListado.forEach(function (e){",
									"        if(e.id == jsonData.id){",
									"            pm.expect(e.is_black).to.eql(jsonData.is_black);",
									"        }",
									"    });",
									"}",
									"",
									"function validateCodes(){",
									"    jsonData.features.forEach(function(feature){",
									"        switch(feature.type){",
									"            case 300:",
									"            pm.expect(feature.title).includes(\"SMS\");",
									"            break;",
									"            case 310:",
									"            pm.expect(feature.title).to.eql(\"MMS\");",
									"            break;",
									"            case 400:",
									"            pm.expect(feature.title).includes(\"excedente\");",
									"            break;",
									"            case 401:",
									"            pm.expect(feature.title).to.eql(\"Llamadas a Personal\");",
									"            break;",
									"            case 402:",
									"            pm.expect(feature.title).to.eql(\"Llamadas a otras Compañías\");",
									"            break;",
									"            case 600:",
									"            pm.expect(feature.title).includes(\"Internet\");",
									"            break;",
									"            case 601:",
									"            pm.expect(feature.title).includes(\"Datos en\")",
									"            break;",
									"            case 700:",
									"            pm.expect(feature.title).to.eql(\"Flow\");",
									"            break;",
									"            case 710:",
									"            pm.expect(feature.title).to.eql(\"WhatsApp Gratis\");",
									"            break;",
									"            case 711:",
									"            pm.expect(feature.title).to.eql(\"Whatsapp en Roaming\");",
									"            break;",
									"            default:",
									"            pm.expect.fail(\"Escenario no contemplado\");",
									"            break;",
									"            }",
									"        });",
									"    }",
									"",
									"function validateFeaturesSort(){",
									"    let items = [];",
									"    jsonData.features.forEach(function (e){",
									"        items.push(e.type);",
									"        })",
									"        var itemsOrdered = [];",
									"    let theOrder = [600, 710, 700, 400, 401 ,402, 300, 310, 601, 711];",
									"    for (i = 0; i < theOrder.length; i++) {",
									"        if (items.indexOf(theOrder[i]) > -1) {",
									"            itemsOrdered.push(theOrder[i]);",
									"        }",
									"    }",
									"    pm.expect(Array.from(new Set(items))).to.eql(itemsOrdered);",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-upselling/v1/upselling/{{line_number}}/{{plan_code}}",
							"host": [
								"{{host}}-upselling"
							],
							"path": [
								"v1",
								"upselling",
								"{{line_number}}",
								"{{plan_code}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Debito Automático",
			"item": [
				{
					"name": "Estado Debito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json().data;\r",
									"let market = pm.environment.get(\"market\");\r",
									"const CARDS_LIST = ['visa', 'master-card', 'american-express'];\r",
									"const OTHER_CARDS = 'unknown';\r",
									"const TYPE_CARD = 'CREDIT';\r",
									"\r",
									"if(jsonData.payment_method !== null){\r",
									"(market == \"prepago\" || jsonData.payment_method.brand !== \"unknown\" ? pm.test.skip : pm.test)('[ALM-14525/ALM-14524] - [Validar marca de tarjeta cuando no pertenece al listado definido]', function () {\r",
									"    pm.expect(jsonData.payment_method.brand).to.be.equal(OTHER_CARDS, 'The brand of the credit card returned is not one of the valid credit cards brands')\r",
									"    pm.expect(jsonData.payment_method.type).to.be.equal(TYPE_CARD)\r",
									"});\r",
									"(market == \"prepago\"  || jsonData.payment_method.brand == \"unknown\" ? pm.test.skip : pm.test)('[ALM-14494/ALM-14524] - [Validar marca de tarjeta del usuario]', function () {\r",
									"    pm.expect(jsonData.payment_method.brand).to.be.oneOf(CARDS_LIST, 'The brand of the credit card returned is not one of the valid credit cards brands')\r",
									"    pm.expect(jsonData.payment_method.type).to.be.equal(TYPE_CARD)\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"(market == \"prepago\" || jsonData.subscribed == false ? pm.test.skip : pm.test)('[ALM-14523] - [Validar respuesta cuando usuario está suscripto al débito automático]', function () {\r",
									"    pm.expect(jsonData.subscribed).to.be.true\r",
									"    pm.expect(jsonData.payment_method_list).to.be.empty\r",
									"});\r",
									"(market == \"prepago\" || jsonData.subscribed == true ? pm.test.skip : pm.test)('[ALM-12044] - [Validar respuesta cuando usuario NO está suscripto a débito automático]', function () {\r",
									"    pm.expect(jsonData.subscribed).to.be.false\r",
									"    pm.expect(jsonData.payment_method).to.be.null\r",
									"});\r",
									"/* Se comenta éste test a espera de una definición de negocio  concreta.\r",
									"(market != \"prepago\" ? pm.test.skip : pm.test)('[ALM-15196] -  [Validar la respuesta cuando es un usuario PREPAGO]', function () {\r",
									"    pm.expect(jsonData.subscribed).to.be.false\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-payment/v3/payments/{{line_number}}/autodebit",
							"host": [
								"{{host}}-payment"
							],
							"path": [
								"v3",
								"payments",
								"{{line_number}}",
								"autodebit"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credit recharge",
			"item": [
				{
					"name": "Credit recharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json().data;\r",
									"let market = pm.environment.get(\"market\");\r",
									"let balancesResponse = pm.environment.get(\"balancesResponse\");\r",
									"let postloginResponse = pm.environment.get(\"postloginResponse\");\r",
									"\r",
									"//let itemRecharge = jsonData.recharge_options;\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9355] - Validar coincidencia de crédito con Balances\", function(){\r",
									"    pm.expect(jsonData.wallet.credit).to.eql(balancesResponse.wallet.credit);\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9394] - Validar el monto de crédito extra\", function(){\r",
									"    jsonData.recharge_options.forEach(function(itemRecharge){\r",
									"        pm.expect(itemRecharge.credit_extra.value).to.eql((itemRecharge.credit_amount.value)*(itemRecharge.percentage_credit_extra/100))\r",
									"    });\r",
									"});\r",
									"\r",
									"(market == \"pospago\" || postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-9354/ALM-9407/ALM-9408] - Validar flag de whatsapp gratis\", function(){\r",
									"    switch(market){\r",
									"        case \"prepago\":\r",
									"        jsonData.recharge_options.forEach(function (itemRecharge) { \r",
									"             if(itemRecharge.credit_amount.value >= 300){\r",
									"                 pm.expect(itemRecharge.has_whatsapp).to.be.true;\r",
									"             }else{\r",
									"                 pm.expect(itemRecharge.has_whatsapp).to.be.false;\r",
									"             }\r",
									"        }); \r",
									"        break;\r",
									"        case \"abono\":\r",
									"            jsonData.recharge_options.forEach(function (itemRecharge) { \r",
									"            pm.expect(itemRecharge.has_whatsapp).to.be.false; \r",
									"        }); \r",
									"        break;\r",
									"    }\r",
									"});\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9356] - Validar que el monto de crédito es mayor al extra\", function(){\r",
									"    jsonData.recharge_options.forEach(function (itemRecharge){\r",
									"        pm.expect(itemRecharge.credit_amount.value).to.be.above(itemRecharge.credit_extra.value)\r",
									"    });\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9862] - Validar que los recharge highlight estén dentro de las opciones de recarga\", function(){\r",
									"    const idsRechargeOptions = jsonData.recharge_options.map(itemRecharge => itemRecharge.id);\r",
									"    jsonData.recharge_highlight.forEach(function(rechargeHighlight){\r",
									"        pm.expect(rechargeHighlight).to.be.oneOf(idsRechargeOptions)\r",
									"    });\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10525 / AC-18433]- Validar campo code en la respuesta\", function(){\r",
									"    pm.expect(pm.response.json().error.code).to.eql(120);\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10526 / ALM-18969] - Validar campo message en la respuesta\", function(){\r",
									"    pm.expect(pm.response.json().error.message).to.eql(\"Mercado es invalido para la operacion a realizar\");\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10522] - Validar código de la respuesta para usuario pospago\", function(){\r",
									"    pm.response.to.have.status(209);\r",
									"});\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19316] - Validar array de beneficios de cada opción de recarga para usuario con PBU activo\", function(){\r",
									"    jsonData.recharge_options.forEach(function (e){\r",
									"        pm.expect(e.benefits).to.have.lengthOf(0)\r",
									"    })\r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19311] - Validar array de beneficios vacío en params para usuario con PBU activo\", function(){\r",
									"    pm.expect(jsonData.params.benefits).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19365] - Validar crédito extra igual a 0 en cada opción de recarga para un usuario con PBU activo\", function(){\r",
									"    jsonData.recharge_options.forEach(function (e){\r",
									"        pm.expect(e.credit_extra.value).to.eql(0)\r",
									"    })\r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19364] - Validar porcentaje de crédito extra igual a 0 en cada opción de recarga para usuario con PBU activo\", function(){\r",
									"    jsonData.recharge_options.forEach(function (e){\r",
									"        pm.expect(e.percentage_credit_extra).to.eql(0)\r",
									"    })\r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19317] - Validar porcentaje de crédito extra igual a 0 en params para usuario con PBU activo\", function(){\r",
									"    pm.expect(jsonData.params.percentage_credit_extra).to.eql(0)\r",
									"});\r",
									"\r",
									"(!postloginResponse.logged_line.plan.is_basic_plan ? pm.test.skip : pm.test)(\"[ALM-19508] - Validar flag de whatsapp gratis para usuarios con PBU activo \" ,function(){\r",
									"    jsonData.recharge_options.forEach(function (itemRecharge) { \r",
									"             pm.expect(itemRecharge.has_whatsapp).to.be.false;\r",
									"    }); \r",
									"});\r",
									"(market != \"prepago\" ? pm.test.skip : pm.test)(\"[ALM-19571/ALM-19573/ALM-19575/ALM-22382/ALM-19572/ALM-19574] - Validar flag de llamadas gratis ilimitadas\", function(){\r",
									"     jsonData.params.benefits.forEach(function (itemRecharge) { \r",
									"             if(itemRecharge.recharge_minimum.value >= 300){\r",
									"                pm.expect(itemRecharge.title).to.eql(\"WhatsApp Gratis y llamadas a otro Personal ilimitadas\");\r",
									"                pm.expect(itemRecharge.recharge_minimum.currency).to.eql(\"ARS\");\r",
									"                pm.expect(itemRecharge.recharge_minimum.symbol).to.eql(\"$\");\r",
									"                pm.expect(itemRecharge.recharge_minimum.formatted).to.eql(\"$300\");\r",
									"             }\r",
									"     }); \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"market\", pm.environment.get(\"market\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-recharge/v1/payments/recharge/{{line_number}}?market={{market}}",
							"host": [
								"{{host}}-recharge"
							],
							"path": [
								"v1",
								"payments",
								"recharge",
								"{{line_number}}"
							],
							"query": [
								{
									"key": "market",
									"value": "{{market}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recharge history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json().data;\r",
									"let market = pm.environment.get(\"market\");\r",
									"let balancesResponse = pm.environment.get(\"balancesResponse\");\r",
									"var _ = require('lodash');\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9325] - Validar coincidencia con el servicio de balances\", function(){\r",
									"    pm.expect(jsonData.wallet.credit).to.eql(balancesResponse.wallet.credit);\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9327] - Validar coincidencia de tipo de recarga con título\", function(){\r",
									"    validateCodes();\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9323] - Validar fecha de inicio de historial menor a fecha de fin\", function(){\r",
									"    let startDate = new Date(jsonData.start_date).getTime();\r",
									"    let endDate = new Date(jsonData.end_date).getTime();\r",
									"    pm.expect(startDate).to.be.at.most(endDate);\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9328] - Validar fecha de recarga dentro del intervalo de historial de recargas\", function(){\r",
									"    validateInterval();\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9324] - Validar ordenamiento del histórico de recargas\", function(){\r",
									"    pm.expect(jsonData.recharges).to.eql(validateOrder(jsonData.recharges));\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9371] - Validar ordenamiento en la sección meses\", function(){\r",
									"    validateMonth(90);\r",
									"});\r",
									"\r",
									"(market == \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-9326] - Validar unicidad en la sección meses\", function(){\r",
									"    pm.expect(validateUnicity(jsonData.month_options)).to.be.true; \r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10525] - Validar campo code en la respuesta\", function(){\r",
									"    pm.expect(pm.response.json().error.code).to.eql(120);\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10526] - Validar campo message en la respuesta\", function(){\r",
									"    pm.expect(pm.response.json().error.message).to.eql(\"Mercado es invalido para la operacion a realizar\");\r",
									"});\r",
									"\r",
									"(market != \"pospago\" ? pm.test.skip : pm.test)(\"[ALM-10522] - Validar código de la respuesta para usuario pospago\", function(){\r",
									"    pm.response.to.have.status(209);\r",
									"});\r",
									"//Functions\r",
									"function validateCodes(){\r",
									"    jsonData.recharges.forEach(function (item){\r",
									"        switch(item.type_recharge){\r",
									"        case 100:\r",
									"        pm.expect(item.title).to.eql(\"Recarga Crédito\");\r",
									"        break;\r",
									"        case 200:\r",
									"        pm.expect(item.title).to.eql(\"Recarga SOS\");\r",
									"        break;\r",
									"        default:\r",
									"        break;\r",
									"    }\r",
									"    });\r",
									"}\r",
									"\r",
									"function validateInterval(){\r",
									"    let startDate = new Date(jsonData.start_date).getTime();\r",
									"    let endDate = new Date(jsonData.end_date).getTime();\r",
									"    jsonData.recharges.forEach(function (recharge){\r",
									"        \r",
									"        pm.expect(new Date(recharge.date).getTime()).to.be.at.least(startDate)\r",
									"        pm.expect(new Date(recharge.date).getTime()).to.be.at.most(endDate)\r",
									"    });\r",
									"}\r",
									"\r",
									"function validateOrder(recharges){\r",
									"    let orderedArray = _.orderBy(recharges, ['date'], ['desc']);\r",
									"    return orderedArray\r",
									"}\r",
									"\r",
									"function validateMonth(days){\r",
									"    let noventaDiasAntes = moment().subtract(days, 'days');\r",
									"    let month_options = jsonData.month_options.reverse();\r",
									"    month_options.forEach(function (mes){\r",
									"        pm.expect(mes.id).to.be.eql(noventaDiasAntes.month()+1);\r",
									"        days = days - 30;\r",
									"        noventaDiasAntes = moment().subtract(days, 'days');\r",
									"    });\r",
									"}\r",
									"\r",
									"function validateUnicity(months){\r",
									"    return (new Set(months)).size == months.length;\r",
									"    \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"market\", pm.environment.get(\"market\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-recharge/v1/payments/recharge/{{line_number}}/history?market={{market}}",
							"host": [
								"{{host}}-recharge"
							],
							"path": [
								"v1",
								"payments",
								"recharge",
								"{{line_number}}",
								"history"
							],
							"query": [
								{
									"key": "market",
									"value": "{{market}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Terminos y condiciones",
			"item": [
				{
					"name": "Terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json().data;\r",
									"const TERMS_MESSAGE = \"Recarga de Crédito: La vigencia de cada recarga de crédito en la línea será de ciento ochenta (180) días corridos contados a partir de su acreditación. Cuando el crédito de la línea sea igual o inferior a $0,01, el Servicio será restringido y sólo se podrá realizar llamadas a números de emergencia y de Atención al Cliente y/o recibir comunicaciones que no conlleven cargo para la línea.\"\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"    pm.test(\"[ALM-12635] - Validar terms_and_conditions de la response\", function (){\r",
									"        pm.expect(jsonData.terms_and_conditions).to.eql(TERMS_MESSAGE)\r",
									"        });\r",
									"        \r",
									"    pm.test(\"[ALM-12633] - Validar coincidencia de type con id de la response\", function(){\r",
									"        pm.expect(jsonData.id).to.eql(pm.variables.get(\"type\"));\r",
									"        });\r",
									"}else{\r",
									"    pm.test(\"[ALM-12639] - Validar código de respuesta al enviar parámetro type incorrecto\", function(){\r",
									"        if(pm.variables.get(\"type\")!= \"recharged\"){\r",
									"            pm.response.to.have.status(404);\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"type\", \"recharged\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}-term/v1/terms/{{type}}",
							"host": [
								"{{host}}-term"
							],
							"path": [
								"v1",
								"terms",
								"{{type}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({key: 'X-Source-Name', value: 'ANDROID'});",
					"var uuid = require('uuid'); ",
					"var myUUID = uuid.v4(); ",
					"",
					"pm.request.headers.add({key: 'X-Global-Transaction-ID', value: myUUID});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}